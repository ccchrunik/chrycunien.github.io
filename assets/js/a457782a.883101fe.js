(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[8444],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9709:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=t(4034),r=t(9973),o=(t(7294),t(3905)),i=["components"],l={},s="Flags",c={unversionedId:"Linux/Script/Syntax/Flags",id:"Linux/Script/Syntax/Flags",isDocsHomePage:!1,title:"Flags",description:"getopts",source:"@site/docs/Linux/Script/Syntax/Flags.md",sourceDirName:"Linux/Script/Syntax",slug:"/Linux/Script/Syntax/Flags",permalink:"/docs/Linux/Script/Syntax/Flags",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Case",permalink:"/docs/Linux/Script/Syntax/Case"},next:{title:"Function",permalink:"/docs/Linux/Script/Syntax/Function"}},p=[{value:"getopts",id:"getopts",children:[{value:"Complete Form",id:"complete-form",children:[],level:3},{value:"Compact Form",id:"compact-form",children:[],level:3}],level:2},{value:"Example",id:"example",children:[],level:2},{value:"References",id:"references",children:[],level:2}],u={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"flags"},"Flags"),(0,o.kt)("h2",{id:"getopts"},"getopts"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"getopts")," is a shell built-in"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"getopts")," is not equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"getopt"),", which is another command")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ type -a getopts\ngetopts is a shell builtin\ngetopts is /usr/bin/getopts\n\n$ type -a getopt\ngetopt is /usr/bin/getopt\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},":")," after a flag means that it must be parsed. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},"vl:s")," means that only when using ",(0,o.kt)("inlineCode",{parentName:"li"},"l")," flag, you should specify a value after it, like ",(0,o.kt)("inlineCode",{parentName:"li"},"-l foobar"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"${OPTARG}")," is the variable to store the result of each parsing."),(0,o.kt)("li",{parentName:"ul"},"To parse all flags, you must use a ",(0,o.kt)("inlineCode",{parentName:"li"},"while")," loop to wrap the ",(0,o.kt)("inlineCode",{parentName:"li"},"case"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"?")," is the default match case."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"usage()"),": usually we will provide a usage function to tell user how to use this script")),(0,o.kt)("h3",{id:"complete-form"},"Complete Form"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"while getopts vl:s OPTION\ndo\n  case ${OPTION} in\n    v)\n      VERBOSE='true'\n      log 'Verbose mode on.'\n      ;;\n    l)\n      LENGTH=\"${OPTARG}\"\n      ;;\n    s)\n      USE_SPECIAL_CHARACTER='true'\n      ;;\n    ?)\n      usage\n      ;;\n  esac\ndone\n")),(0,o.kt)("h3",{id:"compact-form"},"Compact Form"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'while getopts \'rc:m:\' flag; do\n  case "${flag}" in\n    c) CPUs="${OPTARG}" ;;\n    m) MEMORY="${OPTARG}g" ;;\n    r) RESET="true" ;;\n    ?) helpFunc ;;\n  esac\ndone\n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"OPTIND")," is the index of the first extra argument (or the next index of the last flag). For example, it you specify to flag ",(0,o.kt)("inlineCode",{parentName:"li"},"-la"),", then the value of ",(0,o.kt)("inlineCode",{parentName:"li"},"OPTIND")," is 3.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\n# This script generates a random password.\n# The user can set the password length with -l and add a special character with -s.\n# Verbose mode can be enabled with -v.\n\nusage() {\n  echo \"Usage: ${0} [-vs] [-l LENGTH]\" >&2\n  echo 'Generate a random password.' >&2\n  echo '  -l LENGTH  Specify the password length.' >&2\n  echo '  -s         Append a special character to the password.' >&2\n  echo '  -v         Increase verbosity.' >&2\n  exit 1\n}\n\nlog() {\n  local MESSAGE=\"${@}\"\n  if [[ \"${VERBOSE}\" = 'true' ]]\n  then\n    echo \"${MESSAGE}\"\n  fi\n}\n\n# Set a default password length.\nLENGTH=48\n\nwhile getopts vl:s OPTION\ndo\n  case ${OPTION} in\n    v)\n      VERBOSE='true'\n      log 'Verbose mode on.'\n      ;;\n    l)\n      LENGTH=\"${OPTARG}\"\n      ;;\n    s)\n      USE_SPECIAL_CHARACTER='true'\n      ;;\n    ?)\n      usage\n      ;;\n  esac\ndone\n\n# Remove the options while leaving the remaining arguments.\nshift \"$(( OPTIND - 1 ))\"\n\nif [[ \"${#}\" -gt 0 ]]\nthen\n  usage\nfi\n\nlog 'Generating a password.'\n\nPASSWORD=$(date +%s%N${RANDOM}${RANDOM} | sha256sum | head -c${LENGTH})\n\n# Append a special character if requested to do so.\nif [[ \"${USE_SPECIAL_CHARACTER}\" = 'true' ]]\nthen\n  log 'Selecting a random special character.'\n  SPECIAL_CHARACTER=$(echo '!@#$%^&*()_-+=' | fold -w1 | shuf | head -c1)\n  PASSWORD=\"${PASSWORD}${SPECIAL_CHARACTER}\"\nfi\n\nlog 'Done.'\nlog 'Here is the password:'\n\n# Display the password.\necho \"${PASSWORD}\"\n\nexit 0\n")),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://cloudacademy.com/course/shell-scripting-parsing-command-line-options-1520"},"https://cloudacademy.com/course/shell-scripting-parsing-command-line-options-1520")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash"},"https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash"))))}m.isMDXComponent=!0}}]);