(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6197],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(k,o(o({ref:t},u),{},{components:n})):r.createElement(k,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},928:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],l={},s="Networking",c={unversionedId:"Kubernetes/Advanced/Networking",id:"Kubernetes/Advanced/Networking",isDocsHomePage:!1,title:"Networking",description:"Networking Basics",source:"@site/docs/Kubernetes/Advanced/Networking.md",sourceDirName:"Kubernetes/Advanced",slug:"/Kubernetes/Advanced/Networking",permalink:"/docs/Kubernetes/Advanced/Networking",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kubectl Tips",permalink:"/docs/Kubernetes/Advanced/Kubectl-tips"},next:{title:"Pods Patterns",permalink:"/docs/Kubernetes/Advanced/Pod-Patterns"}},u=[{value:"Networking Basics",id:"networking-basics",children:[{value:"IP address",id:"ip-address",children:[]},{value:"Services",id:"services",children:[]}]},{value:"Network Policy",id:"network-policy",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"networking"},"Networking"),(0,i.kt)("h2",{id:"networking-basics"},"Networking Basics"),(0,i.kt)("h3",{id:"ip-address"},"IP address"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each pod is assigned an IP address in the cluster"),(0,i.kt)("li",{parentName:"ul"},"All containers in a pod share the same IP address (also share the same port space)"),(0,i.kt)("li",{parentName:"ul"},"Pod can communicate with each other using Pod IP (same or different node in the cluster)"),(0,i.kt)("li",{parentName:"ul"},"When a pod is killed and restarted, it may be allocated with another IP (ephemeral)")),(0,i.kt)("h3",{id:"services"},"Services"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The service maintain a logical set of pod replicas"),(0,i.kt)("li",{parentName:"ul"},"Identified with labels"),(0,i.kt)("li",{parentName:"ul"},"Services maintain a list of endpoints (pods IP address)"),(0,i.kt)("li",{parentName:"ul"},"Services can send request to any pods in the service"),(0,i.kt)("li",{parentName:"ul"},"Clients only need to know about the service rather than pods"),(0,i.kt)("li",{parentName:"ul"},"Pod can use environment variables or DNS to reach other services")),(0,i.kt)("h4",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Cluster IP"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The default type of service"),(0,i.kt)("li",{parentName:"ul"},"Only reachable within the cluster"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kube-proxy")," cluster component that runs on each node is responsible for proxying request for the service to one of the service's endpoint"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NodePort"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Allow service outside of the cluter to connect to the service in the cluster"),(0,i.kt)("li",{parentName:"ul"},"Causes a given port to be opened on each node in the cluster"),(0,i.kt)("li",{parentName:"ul"},"Still have ",(0,i.kt)("inlineCode",{parentName:"li"},"Cluster IP")),(0,i.kt)("li",{parentName:"ul"},"Any request to the port is routed to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Cluster IP")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Load Balancer"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Expose the service externally through a cloud provider's load balancer"),(0,i.kt)("li",{parentName:"ul"},"Also create ",(0,i.kt)("inlineCode",{parentName:"li"},"NodePort")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Cluster IP")," for the service"),(0,i.kt)("li",{parentName:"ul"},"Some setting by different vendors can be used by annotations"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"External Name"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Enabled by DNS, not proxy"),(0,i.kt)("li",{parentName:"ul"},"You configure an external name service with the DNS name and requests for the service return a CNAME record with the external DNS name."),(0,i.kt)("li",{parentName:"ul"},"Used for external resources such as database")))),(0,i.kt)("h2",{id:"network-policy"},"Network Policy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Rules for controlling network access to Pods"),(0,i.kt)("li",{parentName:"ul"},"Similar to security groups controlling access to virtual machines "),(0,i.kt)("li",{parentName:"ul"},"Scoped to namespace"),(0,i.kt)("li",{parentName:"ul"},"Caveat: Kubernetes network plugin must support Network Policy"),(0,i.kt)("li",{parentName:"ul"},"Non-isolated vs Isolated",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Non-isolated allow traffic from any source"),(0,i.kt)("li",{parentName:"ul"},"When applied with network policy, it becomes isolated"),(0,i.kt)("li",{parentName:"ul"},"The network policy is selected by labels"))),(0,i.kt)("li",{parentName:"ul"},"Policies are rules that are the union of rules, if one of the rule get past, the request can get past"),(0,i.kt)("li",{parentName:"ul"},"The policy rules apply to a connection, it you modify the rules in between the connection, it will not take effect")))}d.isMDXComponent=!0}}]);