(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[6791],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=u(t),d=i,f=m["".concat(l,".").concat(d)]||m[d]||s[d]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9453:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var r=t(4034),i=t(9973),a=(t(7294),t(3905)),o=["components"],c={},l="Numeric Operations",u={unversionedId:"Linux/Script/Syntax/Numeric",id:"Linux/Script/Syntax/Numeric",isDocsHomePage:!1,title:"Numeric Operations",description:"Numeric Expansion",source:"@site/docs/Linux/Script/Syntax/Numeric.md",sourceDirName:"Linux/Script/Syntax",slug:"/Linux/Script/Syntax/Numeric",permalink:"/docs/Linux/Script/Syntax/Numeric",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IO flow",permalink:"/docs/Linux/Script/Syntax/IO"},next:{title:"Special",permalink:"/docs/Linux/Script/Syntax/Special"}},p=[{value:"Numeric Expansion",id:"numeric-expansion",children:[{value:"Examples",id:"examples",children:[],level:3}],level:2},{value:"Other Tools",id:"other-tools",children:[],level:2},{value:"References",id:"references",children:[],level:2}],s={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"numeric-operations"},"Numeric Operations"),(0,a.kt)("h2",{id:"numeric-expansion"},"Numeric Expansion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$(( ))")," is called numeric expansion. Bash will expand the expression inside into a numeric value. Don't be confused with ",(0,a.kt)("inlineCode",{parentName:"li"},"$()"),", which is command substitution."),(0,a.kt)("li",{parentName:"ul"},"Bash does not do any rounding, it just omit the value after the decimal point. If you want to get precise result, please refer to ",(0,a.kt)("inlineCode",{parentName:"li"},"bc")," command.")),(0,a.kt)("h3",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ NUM=$(( 1 + 2 ))\n# NUM = 3\n# also -*/%\n\n$ (( NUM++ ))\n# NUM = 4\n# also --\n\n$ (( NUM += 3 ))\n# NUM = 7\n# also -=/*=//=/%=\n\n$ NUM=$(( NUM += 6 ))\n# NUM = 13\n\n$ A='3'\n$ B='4'\n$ C=$(( A + B ))\n# C = 7\n")),(0,a.kt)("h2",{id:"other-tools"},"Other Tools"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ type -a bc\nbc is /usr/bin/bc\n$ type -a let\nlet is a shell builtin\n$ type -a expr\nexpr is /usr/bin/expr\n")),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://cloudacademy.com/course/shell-scripting-parsing-command-line-options-1520"},"https://cloudacademy.com/course/shell-scripting-parsing-command-line-options-1520"))))}m.isMDXComponent=!0}}]);