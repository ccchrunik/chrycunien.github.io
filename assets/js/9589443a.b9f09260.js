(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[9224],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),f=r,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4930:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var a=n(4034),r=n(9973),i=(n(7294),n(3905)),l=["components"],o={},s="Case",c={unversionedId:"Linux/Script/Syntax/Case",id:"Linux/Script/Syntax/Case",isDocsHomePage:!1,title:"Case",description:"If - Elif - Else",source:"@site/docs/Linux/Script/Syntax/Case.md",sourceDirName:"Linux/Script/Syntax",slug:"/Linux/Script/Syntax/Case",permalink:"/docs/Linux/Script/Syntax/Case",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/Linux/Script/Structure/Overview"},next:{title:"Function",permalink:"/docs/Linux/Script/Syntax/Function"}},u=[{value:"If - Elif - Else",id:"if---elif---else",children:[],level:2},{value:"Case",id:"case-1",children:[],level:2},{value:"References",id:"references",children:[],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"case"},"Case"),(0,i.kt)("h2",{id:"if---elif---else"},"If - Elif - Else"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Syntax: ",(0,i.kt)("inlineCode",{parentName:"li"},"if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi")),(0,i.kt)("li",{parentName:"ul"},"You can use if else syntax to manipulate several conditions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"="),": equals"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"=="),": pattern matching")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"if [[ \"${1}\" = 'start' ]] then\n  echo 'Starting.'\nelif [[ \"${1}\" = 'stop' ]] then\n  echo 'Stopping.'\nelif [[ \"${1}\" = 'status' ]] then\n  echo 'Status:'\nelse\n  echo 'Supply a valid option.' >&2\n  exit 1\nfi\n")),(0,i.kt)("h2",{id:"case-1"},"Case"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"case")," is a built-in command")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ type -a case\n$ help case\n\n# For more information\n$ man bash\n# Search for `case`, you will find that it use the same matching rules of pathname expansion\n# Search for `pathname expansion`, and then look for the pattern matching section\n# Actually, it just like what you normally used in `ls *.txt`\n# *: match any string\n# ?: match any single character\n# [...]: matches any one of the enclosed characters\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Syntax: ",(0,i.kt)("inlineCode",{parentName:"li"},"case WORD in [PATTERN [| PATTERN]...) COMMANDS ;;]... esac")),(0,i.kt)("li",{parentName:"ul"},"Instead of using ",(0,i.kt)("inlineCode",{parentName:"li"},"if-else"),", you can use ",(0,i.kt)("inlineCode",{parentName:"li"},"case")," statement just like ",(0,i.kt)("inlineCode",{parentName:"li"},"switch")," in many programming languages"),(0,i.kt)("li",{parentName:"ul"},"The executed order is top-down, the cases are processed in order"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"|"),": used for separate multiple patterns"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},";;"),": the code block ends when it encounter two semi-colons")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="test.sh"',title:'"test.sh"'},"#!/bin/bash\n\ncase \"${1}\" in\n  start) echo 'Starting.' ;;\n  stop) echo 'Stopping.' ;;\n  status|state|--status|--state) echo 'Status:' ;;\n  *)\n    echo 'Supply a valid option.' >&2\n    exit 1\n    ;;\nesac\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Usage:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ ./test.sh start\n$ ./test.sh stop\n$ ./test.sh status\n")),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cloudacademy.com/course/shell-scripting-parsing-command-line-options-1520"},"https://cloudacademy.com/course/shell-scripting-parsing-command-line-options-1520"))))}m.isMDXComponent=!0}}]);