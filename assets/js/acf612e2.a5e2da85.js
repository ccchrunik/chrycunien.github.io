(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2758],{3905:function(e,r,n){"use strict";n.d(r,{Zo:function(){return p},kt:function(){return f}});var t=n(7294);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),c=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},g={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=i,m=u["".concat(s,".").concat(f)]||u[f]||g[f]||a;return n?t.createElement(m,o(o({ref:r},p),{},{components:n})):t.createElement(m,o({ref:r},p))}));function f(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7563:function(e,r,n){"use strict";n.r(r),n.d(r,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var t=n(2122),i=n(9756),a=(n(7294),n(3905)),o=["components"],l={},s="Path",c={unversionedId:"System Programming/File System/Path",id:"System Programming/File System/Path",isDocsHomePage:!1,title:"Path",description:"Get Working Directory",source:"@site/docs/System Programming/File System/Path.md",sourceDirName:"System Programming/File System",slug:"/System Programming/File System/Path",permalink:"/docs/System Programming/File System/Path",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/System Programming/File System/Intro"},next:{title:"Read",permalink:"/docs/System Programming/File System/Read"}},p=[{value:"Get Working Directory",id:"get-working-directory",children:[]},{value:"Change Directory",id:"change-directory",children:[]},{value:"<code>filepath</code> package",id:"filepath-package",children:[]},{value:"Simple Program",id:"simple-program",children:[]}],g={toc:p};function u(e){var r=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,t.Z)({},g,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"path"},"Path"),(0,a.kt)("h2",{id:"get-working-directory"},"Get Working Directory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://golang.org/pkg/os/#Getwd"},"https://golang.org/pkg/os/#Getwd"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func Getwd() (dir string, err error)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'wd, err := os.Getwd()\nif err != nil {\n    fmt.Println(err)\n    return\n}\nfmt.Println("Current Directory:", wd)\n')),(0,a.kt)("h2",{id:"change-directory"},"Change Directory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://golang.org/pkg/os/#Chdir"},"https://golang.org/pkg/os/#Chdir"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func Chdir(dir string) error\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'if err := os.Chdir("/"); err != nil {\n    fmt.Println(err)\n    return\n}\n\nif wd, err = os.Getwd(); err != nil {\n    fmt.Println(err)\n    return\n}\n')),(0,a.kt)("h2",{id:"filepath-package"},(0,a.kt)("inlineCode",{parentName:"h2"},"filepath")," package"),(0,a.kt)("p",null,"There are many other functions to use in the ",(0,a.kt)("inlineCode",{parentName:"p"},"path/filepath")," package."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://golang.org/pkg/path/filepath/"},"https://golang.org/pkg/path/filepath/"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func Abs(path string) (string, error)\nfunc Base(path string) string\nfunc Clean(path string) string\nfunc Dir(path string) string\nfunc EvalSymlinks(path string) (string, error)\nfunc Ext(path string) string\nfunc FromSlash(path string) string\nfunc Glob(pattern string) (matches []string, err error)\nfunc HasPrefix(p, prefix string) bool\nfunc IsAbs(path string) bool\nfunc Join(elem ...string) string\nfunc Match(pattern, name string) (matched bool, err error)\nfunc Rel(basepath, targpath string) (string, error)\nfunc Split(path string) (dir, file string)\nfunc SplitList(path string) []string\nfunc ToSlash(path string) string\nfunc VolumeName(path string) string\nfunc Walk(root string, fn WalkFunc) error\nfunc WalkDir(root string, fn fs.WalkDirFunc) error\ntype WalkFunc func(path string, info os.FileInfo, err error) error\n")),(0,a.kt)("h2",{id:"simple-program"},"Simple Program"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "os"\n    "path/filepath"\n)\n\nfunc main() {\n    if len(os.Args) != 2 { // ensure path is specified\n        fmt.Println("Please specify a path.")\n        return\n    }\n    root, err := filepath.Abs(os.Args[1]) // get absolute path\n    if err != nil {\n        fmt.Println("Cannot get absolute path:", err)\n        return\n    }\n    pathInfo, err := os.Stat(root)\n    if err != nil {\n        fmt.Println("Path does not exist!")\n        return\n    }\n    if !pathInfo.IsDir() {\n        fmt.Println("The path is not a directory!")\n        return\n    }\n    fmt.Println("Listing files in", root)\n    var c struct {\n        files int\n        dirs int\n    }\n    filepath.Walk(root, func(path string, info os.FileInfo, err error) error {\n        // walk the tree to count files and folders\n        if info.IsDir() {\n            c.dirs++\n        } else {\n            c.files++\n        }\n        fmt.Println("-", path)\n        return nil\n    })\n    fmt.Printf("Total: %d files in %d directories", c.files, c.dirs)\n}\n')))}u.isMDXComponent=!0}}]);