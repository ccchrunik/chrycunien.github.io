(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[2250],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=u(t),d=i,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return t?r.createElement(f,o(o({ref:n},s),{},{components:t})):r.createElement(f,o({ref:n},s))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9348:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return s},default:function(){return m}});var r=t(4034),i=t(9973),a=(t(7294),t(3905)),o=["components"],c={},l="ISP (Interface Segregation Principle)",u={unversionedId:"Programming/Design Pattern/Principle/ISP",id:"Programming/Design Pattern/Principle/ISP",isDocsHomePage:!1,title:"ISP (Interface Segregation Principle)",description:"- Split a big interfaces into several smaller interface to limit the range when you want to modify some of the interface in the future.",source:"@site/docs/Programming/Design Pattern/Principle/ISP.md",sourceDirName:"Programming/Design Pattern/Principle",slug:"/Programming/Design Pattern/Principle/ISP",permalink:"/docs/Programming/Design Pattern/Principle/ISP",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DIP (Dependency Inversion Principle)",permalink:"/docs/Programming/Design Pattern/Principle/DIP"},next:{title:"LSP (Kiskov Subsitution Principle)",permalink:"/docs/Programming/Design Pattern/Principle/LSP"}},s=[{value:"Example",id:"example",children:[],level:2},{value:"References",id:"references",children:[],level:2}],p={toc:s};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"isp-interface-segregation-principle"},"ISP (Interface Segregation Principle)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Split a big interfaces into several smaller interface to limit the range when you want to modify some of the interface in the future.")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example, we find that ",(0,a.kt)("inlineCode",{parentName:"p"},"Machine")," interface has 3 methods. Thus once you have to implement this interface, you have to implement all 3 methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Document\n{\n}\n\ninterface Machine\n{\n  void print(Document d);\n  void fax(Document d) throws Exception;\n  void scan(Document d) throws Exception;\n}\n\n// ok if you need a multifunction machine\nclass MultiFunctionPrinter implements Machine\n{\n  public void print(Document d)\n  {\n    //\n  }\n\n  public void fax(Document d)\n  {\n    //\n  }\n\n  public void scan(Document d)\n  {\n    //\n  }\n}\n\nclass OldFashionedPrinter implements Machine\n{\n  public void print(Document d)\n  {\n    // yep\n  }\n\n  public void fax(Document d) throws Exception\n  {\n    throw new Exception();\n  }\n\n  public void scan(Document d) throws Exception\n  {\n    throw new Exception();\n  }\n}\n")),(0,a.kt)("p",null,"However, in some situations you may want to only implement some of the functionality like ",(0,a.kt)("inlineCode",{parentName:"p"},"Print()")," only. An easy soluton is to split this interface into 3 differenct interface and then you can implement each interface separately."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"interface Printer\n{\n  void Print(Document d) throws Exception;\n}\n\ninterface IScanner\n{\n  void Scan(Document d) throws Exception;\n}\n\nclass JustAPrinter implements Printer\n{\n  public void Print(Document d)\n  {\n\n  }\n}\n\nclass Photocopier implements Printer, IScanner\n{\n  public void Print(Document d) throws Exception\n  {\n    throw new Exception();\n  }\n\n  public void Scan(Document d) throws Exception\n  {\n    throw new Exception();\n  }\n}\n")),(0,a.kt)("p",null,"In addition, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"extends")," to combine several interface into a larger interface for convenience. This will not cause a problem in the multiple inheritance in class because interfaces only defines the method signature instead of the actual implementation. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If two interface have different method signature, it may be a totally different methods or method overloading. "),(0,a.kt)("li",{parentName:"ul"},"If two interface have the same method signature, it just fine because they actually means the same method based on the java definition."),(0,a.kt)("li",{parentName:"ul"},"But it is a different question when you refer to whether this is what you actually want in your program to let a method that can be used as two interfaces' method. The actual behavior may not be what you want.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"interface MultiFunctionDevice extends Printer, IScanner //\n{\n\n}\n\nclass MultiFunctionMachine implements MultiFunctionDevice\n{\n  // compose this out of several modules\n  private Printer printer;\n  private IScanner scanner;\n\n  public MultiFunctionMachine(Printer printer, IScanner scanner)\n  {\n    this.printer = printer;\n    this.scanner = scanner;\n  }\n\n  public void Print(Document d) throws Exception\n  {\n    printer.Print(d);\n  }\n\n  public void Scan(Document d) throws Exception\n  {\n    scanner.Scan(d);\n  }\n}\n")),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.udemy.com/course/design-patterns-java/"},"https://www.udemy.com/course/design-patterns-java/"))))}m.isMDXComponent=!0}}]);