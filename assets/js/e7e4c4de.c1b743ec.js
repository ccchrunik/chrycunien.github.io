(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[6159],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1876:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(4034),r=n(9973),i=(n(7294),n(3905)),o=["components"],s={},l="Java Generic",c={unversionedId:"Programming/Language/Java/Advanced/Java-Generic",id:"Programming/Language/Java/Advanced/Java-Generic",isDocsHomePage:!1,title:"Java Generic",description:"PECS",source:"@site/docs/Programming/Language/Java/Advanced/Java-Generic.md",sourceDirName:"Programming/Language/Java/Advanced",slug:"/Programming/Language/Java/Advanced/Java-Generic",permalink:"/docs/Programming/Language/Java/Advanced/Java-Generic",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/docs/Programming/Language/Java/Setup"},next:{title:"Setup",permalink:"/docs/Programming/Language/Python/Setup"}},p=[{value:"PECS",id:"pecs",children:[{value:"Extends",id:"extends",children:[],level:3},{value:"Super",id:"super",children:[],level:3},{value:"T",id:"t",children:[],level:3}],level:2},{value:"Recursive Generic",id:"recursive-generic",children:[{value:"Explanation",id:"explanation",children:[],level:3}],level:2},{value:"References",id:"references",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"java-generic"},"Java Generic"),(0,i.kt)("h2",{id:"pecs"},"PECS"),(0,i.kt)("p",null,'PECS: "Producer Extends, Consumer Super".'),(0,i.kt)("p",null,"In java generic, we sometimes want to set some boundary of our type parameter."),(0,i.kt)("h3",{id:"extends"},"Extends"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"List<? extends T>\n")),(0,i.kt)("p",null,"This snippet means we only need a type ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),' for future use (we only need a "view" of ',(0,i.kt)("inlineCode",{parentName:"p"},"T"),"). When we want to read an element from the list, we only care about whether an element in the list can be ",(0,i.kt)("strong",{parentName:"p"},"upcast")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),". Therefore, this is similiar to a producer to produce the values. (The list that produces the values.)"),(0,i.kt)("h3",{id:"super"},"Super"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"List<? super T>\n")),(0,i.kt)("p",null,"Similar to extends, this is the opposite version. The ",(0,i.kt)("inlineCode",{parentName:"p"},"super")," means a consumer, you write a value into this list, and what you only care about is whether an ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," can be ",(0,i.kt)("strong",{parentName:"p"},"upcast")," and then put into the list."),(0,i.kt)("h3",{id:"t"},"T"),(0,i.kt)("p",null,"If a data structure need both producer and consumer, it should be declare as a normal type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"List<T>\n")),(0,i.kt)("h2",{id:"recursive-generic"},"Recursive Generic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Enum<E extends Enum<E>>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"interface HasAttributes<A extends HasAttributes<A, B>, \n                        B extends HasAttributesType<B>> extends Identification<B>\n")),(0,i.kt)("h3",{id:"explanation"},"Explanation"),(0,i.kt)("p",null,"In the first sight, you may find these type parameter very confounding, but it's actually really easy to understand."),(0,i.kt)("p",null,"First, let we write a simple generic class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Person<T>\n")),(0,i.kt)("p",null,"In the above snippet, it means that some of the class body will use ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," as some return type or argument type. However, we do not impose any restriction on it. What if we want to limit the type? We can add some additional syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Person<T extends SOME_CLASS>\n")),(0,i.kt)("p",null,"This time, we only allow types that are the child. In other words, you set an upper bound of a type. What if we want ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," to be a child class of ",(0,i.kt)("inlineCode",{parentName:"p"},"Person"),"? It's fairly simple:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Person<T extends Person<T>>\n")),(0,i.kt)("p",null,"What does it happen? Compared with the second snippet, we replace it to ",(0,i.kt)("inlineCode",{parentName:"p"},"Person<T>"),", why? Because we just make a ",(0,i.kt)("inlineCode",{parentName:"p"},"Person")," class to become ",(0,i.kt)("inlineCode",{parentName:"p"},"Person<T>")," in the first snippet, this is just a plain replacement."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java"},"https://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/211143/java-enum-definition"},"https://stackoverflow.com/questions/211143/java-enum-definition")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/1330901/generic-interface-takes-self-as-parameter-recursive-generic"},"https://stackoverflow.com/questions/1330901/generic-interface-takes-self-as-parameter-recursive-generic")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://madbean.com/2004/mb2004-3/"},"http://madbean.com/2004/mb2004-3/"))))}d.isMDXComponent=!0}}]);