(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[995],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return i},kt:function(){return b}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},i=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=u(n),b=l,d=m["".concat(c,".").concat(b)]||m[b]||p[b]||r;return n?a.createElement(d,o(o({ref:t},i),{},{components:n})):a.createElement(d,o({ref:t},i))}));function b(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:l,o[1]=s;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4680:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return i},default:function(){return m}});var a=n(2122),l=n(9756),r=(n(7294),n(3905)),o=["components"],s={},c="Kubectl Tips",u={unversionedId:"Kubernetes/Advanced/Kubectl-tips",id:"Kubernetes/Advanced/Kubectl-tips",isDocsHomePage:!1,title:"Kubectl Tips",description:"- Set config",source:"@site/docs/Kubernetes/Advanced/Kubectl-tips.md",sourceDirName:"Kubernetes/Advanced",slug:"/Kubernetes/Advanced/Kubectl-tips",permalink:"/docs/Kubernetes/Advanced/Kubectl-tips",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setup Guide",permalink:"/docs/Go/Setup"},next:{title:"Networking",permalink:"/docs/Kubernetes/Advanced/Networking"}},i=[],p={toc:i};function m(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"kubectl-tips"},"Kubectl Tips"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set config")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Set the config and specify that we will use namespace 'labels' as default\nkubectl config set-context $(kubectl config current-context) --namespace=labels\n\n# Set alias to quickly switch between namespace\n# Usage: kcd <namespace> \nalias kcd='kubectl config set-context $(kubectl config current- context) --namespace '\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get Logs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Get the logs of the previous logs of an container\nkubectl logs mypod --previous\n\n# You also can get restart information in describe command\nkubectl describe po kubia-liveness\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get help")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Get all commands\nkubectl\n# Or kubectl | less\n\n# Get short-hand resources\nkubectl api-resources\n\n# Explain a resource\nkubectl explain -h | less\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add auto completion for Kubernetes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Follow instruction for your terminal\nkubectl completion --help\n\n# I use zsh\nsource <(kubectl completion zsh)\n\n# Add to zshrc\necho "source <(kubectl completion zsh)" >> ~/.zshrc\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get Labels")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Get all resources\nkubectl get all\n\n# Get pods of all namespaces\nkubectl get pods --all-namespaces\n\n# show labels\nkubectl get pods --all-namespaces --show-labels\n\n# Specify labels\n# You will find an additional colume as the label name, with the value as the colume value\nkubectl get pods --all-namespaces --show-labels -L <label_name>\n\n# Filter out the output without the label\nkubectl get pods --all-namespaces --show-labels -l <label_name>\n\n# Append '=' after the key for equality filtering, '!=' is the opposite\nkubectl get pods --all-namespaces --show-labels -l <label_name>=<label_value>\n\n# Use ',' to separate selection conditions\n# Ensure that we still only get the output of pods that have <label_name>\nkubectl get pods --all-namespaces --show-labels -l <label_name>!=<label_value>,<label_name>\n\n# Use in or not in to select labels\nkubectl get pods -L color,tier -l 'color in (blue,green)'\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sorting")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Sort by timestamp\nkubectl get pods -n kube-system --sort-by=metadata.creationTimestamp\n# For more complex case, use\n# kubectl get pods -n kube-system --sort-by='{.metadata.creationTimestamp}'\n# . means root json object\n\n# You can sort by field that defined in the manifest file\nkubectl get pod <pod_name> -n kube-system -o=yaml\n\n# To sort by another field\n# In this case, sort by the root -> status -> podIP\n# Each . is a level of indentation (parent-child relationship)\n# -o wide is to show more information including ip address\nkubectl get pods -n kube-system --sort-by='{.status.podIP}' -o wide\n\n# Get pods ip by json \n# We use items because we use a general pods not a specific pod name\nkubectl get pods -n kube-system --sort-by='{.status.podIP}' -o jsonpath='{.items[*].status.podIP}'\n\n# Much more complex (uncommon)\nkubectl get pods -n kube-system --sort-by='{.status.podIP}' -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.status.podIP}{\"\\n\"}{end}'\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create manifest files")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Use kubectl create <resource_name> -h to find how to create a service\n\n# Create namespace using kubectl\nkubectl create namespace tips -o yaml --dry-run=client > tips/1-namespace.yaml\n\n# Create deployment\nkubectl create deployment nginx --image=nginx --port=80 --replicas=2 --dry-run=client -o yaml\n")))}m.isMDXComponent=!0}}]);