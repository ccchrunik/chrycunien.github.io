(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2515],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=r,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return t?a.createElement(f,o(o({ref:n},p),{},{components:t})):a.createElement(f,o({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8272:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=t(4034),r=t(9973),i=(t(7294),t(3905)),o=["components"],s={},l="ConfidMaps and Secrets",c={unversionedId:"Cloud/Kubernetes/Basics/Config",id:"Cloud/Kubernetes/Basics/Config",isDocsHomePage:!1,title:"ConfidMaps and Secrets",description:"Motivation",source:"@site/docs/Cloud/Kubernetes/Basics/Config.md",sourceDirName:"Cloud/Kubernetes/Basics",slug:"/Cloud/Kubernetes/Basics/Config",permalink:"/docs/Cloud/Kubernetes/Basics/Config",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Autoscaling",permalink:"/docs/Cloud/Kubernetes/Basics/Autoscaling"},next:{title:"Deployments",permalink:"/docs/Cloud/Kubernetes/Basics/Deployments"}},p=[{value:"Motivation",id:"motivation",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Source Code",id:"source-code",children:[],level:2},{value:"Commands",id:"commands",children:[],level:2},{value:"References",id:"references",children:[],level:2}],m={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"confidmaps-and-secrets"},"ConfidMaps and Secrets"),(0,i.kt)("h2",{id:"motivation"},"Motivation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All container information has been stored in Pod spec"),(0,i.kt)("li",{parentName:"ul"},"Not quite portable"),(0,i.kt)("li",{parentName:"ul"},"Presents security issues if the file contains sensitive data")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ConfigMaps and Secrets separate confugration from pod ",(0,i.kt)("inlineCode",{parentName:"li"},"spec")),(0,i.kt)("li",{parentName:"ul"},"Results in easier to manage and more portable manifests"),(0,i.kt)("li",{parentName:"ul"},"Both are similar but Secrets are used to store sensitive data (not encryption or access control)"),(0,i.kt)("li",{parentName:"ul"},"Secrets are just base64 encoded string, but kubernets will automatically decode/encode for you"),(0,i.kt)("li",{parentName:"ul"},"They are specialized types of secret for storing Docker registry credentials and TLS certificate"),(0,i.kt)("li",{parentName:"ul"},"Data are stored in key-value pair"),(0,i.kt)("li",{parentName:"ul"},"Pods must reference ConfigMaps or Secrets to use their data"),(0,i.kt)("li",{parentName:"ul"},"References can be made by mounting Volumes or setting environment variables")),(0,i.kt)("h2",{id:"source-code"},"Source Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="10.1-namespace.yaml"',title:'"10.1-namespace.yaml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: config\n  labels:\n    app: counter\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="10.2-date_tier_config.yaml"',title:'"10.2-date_tier_config.yaml"'},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis-config\ndata:\n  # We only add one key-value pair here\n  config: | # YAML for multi-line string\n    # Redis config file\n    tcp-keepalive 240\n    maxmemory 1mb\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="10.3-data_tier.yaml"',title:'"10.3-data_tier.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: data-tier\n  labels:\n    app: microservices\nspec:\n  ports:\n  - port: 6379\n    protocol: TCP # default \n    name: redis # optional when only 1 port\n  selector:\n    tier: data \n  type: ClusterIP # default\n---\napiVersion: apps/v1 # apps API group\nkind: Deployment\nmetadata:\n  name: data-tier\n  labels:\n    app: microservices\n    tier: data\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: data\n  template:\n    metadata:\n      labels:\n        app: microservices\n        tier: data\n    spec: # Pod spec\n      containers:\n      - name: redis\n        image: redis:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n          - containerPort: 6379\n            name: redis\n        livenessProbe:\n          tcpSocket:\n            port: redis # named port\n          initialDelaySeconds: 15\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n        command:\n          - redis-server\n          - /etc/redis/redis.conf\n        volumeMounts:\n          - mountPath: /etc/redis\n            name: config\n      volumes:\n        - name: config\n          # Secret: change this field to secret\n          configMap:\n            # Secret: change this field to secretName\n            # This field is the name of the configMap in the cluster\n            name: redis-config\n            items:\n            - key: config\n              path: redis.conf\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="10.4-app_tier_secret.yaml"',title:'"10.4-app_tier_secret.yaml"'},"apiVersion: v1\nkind: Secret\nmetadata:\n  name: app-tier-secret\nstringData: # unencoded data\n  api-key: LRcAmM1904ywzK3esX\n  decoded: hello\ndata: #for base-64 encoded data\n  encoded: aGVsbG8= # hello in base-64\n\n# api-key secret (only) is equivalent to\n# kubectl create secret generic app-tier-secret --from-literal=api-key=LRcAmM1904ywzK3esX\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="10.5-app_tier.yaml"',title:'"10.5-app_tier.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: app-tier\n  labels:\n    app: microservices\nspec:\n  ports:\n  - port: 8080\n  selector:\n    tier: app\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-tier\n  labels:\n    app: microservices\n    tier: app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: app\n  template:\n    metadata:\n      labels:\n        app: microservices\n        tier: app\n    spec:\n      containers:\n      - name: server\n        image: lrakai/microservices:server-v1\n        ports:\n          - containerPort: 8080\n            name: server\n        env:\n          - name: REDIS_URL\n            # Environment variable service discovery\n            # Naming pattern:\n            #   IP address: <all_caps_service_name>_SERVICE_HOST\n            #   Port: <all_caps_service_name>_SERVICE_PORT\n            #   Named Port: <all_caps_service_name>_SERVICE_PORT_<all_caps_port_name>\n            value: redis://$(DATA_TIER_SERVICE_HOST):$(DATA_TIER_SERVICE_PORT_REDIS)\n            # In multi-container example value was\n            # value: redis://localhost:6379 \n          - name: DEBUG\n            value: express:*\n          - name: API_KEY\n            valueFrom:\n              # configMap: change this field to configMapKeyRef\n              secretKeyRef:\n                name: app-tier-secret\n                key: api-key\n        livenessProbe:\n          httpGet:\n            path: /probe/liveness\n            port: server\n          initialDelaySeconds: 5\n        readinessProbe:\n          httpGet:\n            path: /probe/readiness\n            port: server\n          initialDelaySeconds: 3\n      initContainers:\n        - name: await-redis\n          image: lrakai/microservices:server-v1\n          env:\n          - name: REDIS_URL\n            value: redis://$(DATA_TIER_SERVICE_HOST):$(DATA_TIER_SERVICE_PORT_REDIS)\n          command:\n            - npm\n            - run-script\n            - await-redis\n")),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Verify the config map setting")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Connect into the container\nkubectl -n config exec -it <pod_name> -- /bin/bash\n\n# Print file contnet\ncat /etc/redis/redis.conf\n\n# Check the redis setting\nredis-cli CONFIG GET tcp-keepalive\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Config map information")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Get config map value\nkubectl -n config describe configmaps\n\n# Edit config map file\nkubectl -n config edit configmaps\n\n# Neet to rollout to actually make change\nkubectl -n config rollout restart deployment data-tier\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Secret information")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Get secret value (FAIL !!!) You only see OPAQUE\nkubectl -n config describe secrets\n\n# Edit secret file\nkubectl -n config edit secrets\n\n# Neet to rollout to actually make change\nkubectl -n config rollout restart deployment app-tier\n")),(0,i.kt)("h2",{id:"references"},"References"))}d.isMDXComponent=!0}}]);