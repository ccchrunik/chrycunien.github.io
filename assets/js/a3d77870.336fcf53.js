(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[5087],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=n,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return r?a.createElement(f,l(l({ref:t},p),{},{components:r})):a.createElement(f,l({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1678:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=r(4034),n=r(9973),i=(r(7294),r(3905)),l=["components"],o={},s="P4 Overview",c={unversionedId:"System/Network/Virtualization/P4/P4-Overview",id:"System/Network/Virtualization/P4/P4-Overview",isDocsHomePage:!1,title:"P4 Overview",description:"P4 = Protocol-Independent Packet Processors",source:"@site/docs/System/Network/Virtualization/P4/P4-Overview.md",sourceDirName:"System/Network/Virtualization/P4",slug:"/System/Network/Virtualization/P4/P4-Overview",permalink:"/docs/System/Network/Virtualization/P4/P4-Overview",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"P4 Lab",permalink:"/docs/System/Network/Virtualization/P4/P4-Lab"},next:{title:"P4 Programming",permalink:"/docs/System/Network/Virtualization/P4/P4-Programming"}},p=[{value:"SDN",id:"sdn",children:[{value:"Limitation",id:"limitation",children:[],level:3}],level:2},{value:"P4",id:"p4",children:[{value:"Version",id:"version",children:[],level:3},{value:"Benefits",id:"benefits",children:[],level:3},{value:"Hardwares",id:"hardwares",children:[],level:3},{value:"Processing Steps",id:"processing-steps",children:[],level:3}],level:2},{value:"P4 Process Architecture",id:"p4-process-architecture",children:[],level:2},{value:"P4 Language Elements",id:"p4-language-elements",children:[],level:2},{value:"P4 Libraries",id:"p4-libraries",children:[],level:2},{value:"P4 Target Programming",id:"p4-target-programming",children:[],level:2},{value:"P4 V1Model Architecture",id:"p4-v1model-architecture",children:[],level:2},{value:"P4 + SDN",id:"p4--sdn",children:[],level:2},{value:"References",id:"references",children:[],level:2}],u={toc:p};function d(e){var t=e.components,o=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"p4-overview"},"P4 Overview"),(0,i.kt)("p",null,"P4 = Protocol-Independent Packet Processors"),(0,i.kt)("h2",{id:"sdn"},"SDN"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Network devices are divided into control and data planes."),(0,i.kt)("li",{parentName:"ul"},"The controller install rules into forwarding table in switches to control traffic routing")),(0,i.kt)("h3",{id:"limitation"},"Limitation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The packet fields that can be matched are limited by OpenFlow protocol."),(0,i.kt)("li",{parentName:"ul"},"The actions we can take on packets are also limited."),(0,i.kt)("li",{parentName:"ul"},"OpenFlow switches reserve TCAM space for all possible fields --\x3e waste TCAM space."),(0,i.kt)("li",{parentName:"ul"},"The design of hardware (to support more actions) (limited by Openflow protocol) is also hard to change because it\u2019s too expensive.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"SDN-match-fields",src:r(2001).Z})," ",(0,i.kt)("img",{alt:"SDN-action-types",src:r(4083).Z})),(0,i.kt)("h2",{id:"p4"},"P4"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"P4 is a language to describe what a switch should do."),(0,i.kt)("li",{parentName:"ul"},"Bottom-up design (SDN) V.S. a top-down design (P4)"),(0,i.kt)("li",{parentName:"ul"},"SDN --\x3e programmable control plane"),(0,i.kt)("li",{parentName:"ul"},"P4 --\x3e programmable data plane"),(0,i.kt)("li",{parentName:"ul"},"P4 is commonly used in network security or statistics because it is pretty flexible on manipulate and inspect packets."),(0,i.kt)("li",{parentName:"ul"},"Goals:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Reconfigurability"),(0,i.kt)("li",{parentName:"ul"},"Protocol-independence"),(0,i.kt)("li",{parentName:"ul"},"Target Independence (Can run on any level (sw and hw), but this has not been achieved now)\\"))),(0,i.kt)("li",{parentName:"ul"},"Note: Since we still need a way to communicate between data plane and control plane, we need to define a protocol other than OpenFlow.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"SDN-vs-P4-1",src:r(5621).Z})),(0,i.kt)("h3",{id:"version"},"Version"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Before 2017: P414"),(0,i.kt)("li",{parentName:"ul"},"After 2017: P416"),(0,i.kt)("li",{parentName:"ul"},"They have very different syntax.")),(0,i.kt)("h3",{id:"benefits"},"Benefits"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"New Features")," \u2013 Add new protocols"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Reduce complexity")," \u2013 Remove unused protocols"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Efficient use of resources")," \u2013 flexible use of tables"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Greater visibility")," \u2013 New diagnostic techniques, telemetry, etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SW style development")," \u2013 rapid design cycle, fast innovation, fix data plane bugs in the field"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"You keep your own ideas"))),(0,i.kt)("h3",{id:"hardwares"},"Hardwares"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Let control plane and data plane can be developed by the same person."),(0,i.kt)("li",{parentName:"ul"},"New custom ASICs can achieve such flexibility at terabit speeds. (Kangaroo INFOCOM \u201910, SDN Chip\nSIGCOMM \u201913, Intel FM6000 switch silicon)"),(0,i.kt)("li",{parentName:"ul"},"Some switches are more programmable than others:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"FPGA (Xilinx, Altera, Corsa)"),(0,i.kt)("li",{parentName:"ul"},"NPU (Ezchip, Netronome)"),(0,i.kt)("li",{parentName:"ul"},"CPU (OVS, ...)")))),(0,i.kt)("h3",{id:"processing-steps"},"Processing Steps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In traditional switches, these 3 steps are bundled and can not modify."),(0,i.kt)("li",{parentName:"ul"},"In the first step, the switch will fetch (actually tears out) the header from the packet."),(0,i.kt)("li",{parentName:"ul"},"Then it will try to match a rule in the forwarding (or flow) table."),(0,i.kt)("li",{parentName:"ul"},"Last, it takes action to forward, drop, ... the packet.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"P4-process-steps",src:r(3910).Z})),(0,i.kt)("h2",{id:"p4-process-architecture"},"P4 Process Architecture"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The process model is just like iptables in Linux."),(0,i.kt)("li",{parentName:"ul"},"You can choose to reconstruct which parts of header in the new one."),(0,i.kt)("li",{parentName:"ul"},"You can even wrap ip header in tcp header (to only allow p4 switch to handle this packet)")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"P4-process-architecture",src:r(2775).Z})),(0,i.kt)("h2",{id:"p4-language-elements"},"P4 Language Elements"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"P4-language-elements",src:r(4121).Z})),(0,i.kt)("h2",{id:"p4-libraries"},"P4 Libraries"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"P4 Target: An embodiment of a specific hardware implementation"),(0,i.kt)("li",{parentName:"ul"},"P4 Architecture: Provides an interface to program a target via some set of P4-programmable components, externs, fixed components"),(0,i.kt)("li",{parentName:"ul"},"The library of P4 can be divided into 2 parts: core and external"),(0,i.kt)("li",{parentName:"ul"},"The core library is target-independent."),(0,i.kt)("li",{parentName:"ul"},"The external libraries have different architectural implementation. Different hardware provides different functions, so you need an external libraries for different targets.")),(0,i.kt)("h2",{id:"p4-target-programming"},"P4 Target Programming"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The control plan can also means data plane\u2019s control plane, or a remote controller"),(0,i.kt)("li",{parentName:"ul"},"CPU port is for packet exchange between switch and controller (or another switch) (in or out switch)"),(0,i.kt)("li",{parentName:"ul"},"Send to CPU port is to perform packet-in operation, because CPU is used to connect to controller"),(0,i.kt)("li",{parentName:"ul"},"The compiler is usually provided by vendors")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"P4-target-programming",src:r(4065).Z})),(0,i.kt)("h2",{id:"p4-v1model-architecture"},"P4 V1Model Architecture"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Metadata is used to pass information between hardware and p4"),(0,i.kt)("li",{parentName:"ul"},"Hardware looks at metadata in each stage and perform corresponding operations"),(0,i.kt)("li",{parentName:"ul"},"Ingress determines which action to match to."),(0,i.kt)("li",{parentName:"ul"},"Egress is responsible for how to process the packet again before actually send this packet out")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"P4-V1Model",src:r(1763).Z})),(0,i.kt)("h2",{id:"p4--sdn"},"P4 + SDN"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"P4 program configures forwarding behavior (abstract forwarding model), and express serial dependencies (e.g. ARP/L3 Routing)"),(0,i.kt)("li",{parentName:"ul"},"P4 compiler translates into a target-specific representation"),(0,i.kt)("li",{parentName:"ul"},"OF can still be used to install and query rules once forwarding model is defined")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"P4-SDN",src:r(4119).Z}),"\n",(0,i.kt)("img",{alt:"P4-runtime",src:r(8842).Z})),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This note is based on NTU course - ",(0,i.kt)("a",{parentName:"li",href:"https://nol.ntu.edu.tw/nol/coursesearch/print_table.php?course_id=942%20U0710&class=&dpt_code=9420&ser_no=50698&semester=110-1&lang=CH"},"Network Virtualization and Security"))))}d.isMDXComponent=!0},4119:function(e,t,r){"use strict";t.Z=r.p+"assets/images/P4-SDN-959409d82d77987bd6d0778d30dfd3f0.png"},1763:function(e,t,r){"use strict";t.Z=r.p+"assets/images/P4-V1Model-15176f13afdef59ab4ce6099aafdab5c.png"},4121:function(e,t,r){"use strict";t.Z=r.p+"assets/images/P4-language-elements-8e0842dbec3ae1537d29401a56997923.png"},2775:function(e,t,r){"use strict";t.Z=r.p+"assets/images/P4-process-architecture-a6ce582a1d7680b7bb3b706af284086f.png"},3910:function(e,t,r){"use strict";t.Z=r.p+"assets/images/P4-process-steps-07d554cb1520efc9055b5d4709932c77.png"},8842:function(e,t,r){"use strict";t.Z=r.p+"assets/images/P4-runtime-db1d99f116363e09eca92abd09b9b088.png"},4065:function(e,t,r){"use strict";t.Z=r.p+"assets/images/P4-target-programming-580cc00713694b7894d0d0827746aa86.png"},4083:function(e,t,r){"use strict";t.Z=r.p+"assets/images/SDN-action-types-b6335788e78d29a6942f2a8094fcb2cc.png"},2001:function(e,t,r){"use strict";t.Z=r.p+"assets/images/SDN-match-fields-27e44ea4bbfc5e750f9e6c68703c8922.png"},5621:function(e,t,r){"use strict";t.Z=r.p+"assets/images/SDN-vs-P4-1-9b32921747874bf33c68157853c37b2e.png"}}]);