(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[7901],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=u(t),m=o,g=f["".concat(c,".").concat(m)]||f[m]||p[m]||i;return t?r.createElement(g,a(a({ref:n},l),{},{components:t})):r.createElement(g,a({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1930:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return f}});var r=t(4034),o=t(9973),i=(t(7294),t(3905)),a=["components"],s={},c="Fake APIs",u={unversionedId:"Commons/Testing/Go/Unit/fake-api",id:"Commons/Testing/Go/Unit/fake-api",isDocsHomePage:!1,title:"Fake APIs",description:"",source:"@site/docs/Commons/Testing/Go/Unit/fake-api.md",sourceDirName:"Commons/Testing/Go/Unit",slug:"/Commons/Testing/Go/Unit/fake-api",permalink:"/docs/Commons/Testing/Go/Unit/fake-api",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Useful package",permalink:"/docs/Commons/Testing/Go/Useful"},next:{title:"DIP (Dependency Inversion Principle)",permalink:"/docs/Programming/Design Pattern/Principle/DIP"}},l=[],p={toc:l};function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fake-apis"},"Fake APIs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'type Client struct {\n    Key     string\n    baseURL string\n}\n\nfunc (c *Client) BaseURL() string {\n    if c.baseURL == "" {\n        return "https://api.stripe.com"\n    }\n    return c.baseURL\n}\n\nfunc (c *Client) Charge(amount int, source, desc string) (*Charge, error) {\n    v := url.Values{}\n    v.Set("amount", strconv.Itoa(amount))\n    v.Set("currency", "usd")\n    v.Set("source", source)\n    v.Set("description", desc)\n    req, err := http.NewRequest(http.MethodPost, c.BaseURL()+"/v1/charges", strings.NewReader(v.Encode()))\n    if err != nil {\n        return nil, err\n    }\n    req.SetBasicAuth(c.Key, "")\n    var client http.Client\n    res, err := client.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer res.Body.Close()\n    resBytes, err := ioutil.ReadAll(res.Body)\n    if err != nil {\n        return nil, err\n    }\n    var charge Charge\n    err = json.Unmarshal(resBytes, &charge)\n    if err != nil {\n        return nil, err\n    }\n    return &charge, nil\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func TestClient(t *testing.T) (*Client, *http.ServeMux, func()) {\n    mux := http.NewServeMux()\n    server := httptest.NewServer(mux)\n    c := &Client{\n        baseURL: server.URL\n    }\n    return c, mux, func() {\n        server.close()\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'func TestApp(t *testing.T) {\n    client, mux, teardown := stripe.TestClient(t)\n    defer teardown()\n\n    mux.HandleFunc("/v1/charges", func(w http.ResponseWriter, r *http.Request) {\n        fmt.Fprint(w, `{"id":"ch_1DEjEH2eZvKYlo2CxOmkZL4D","amount":2000,"description":"Charge for demo purposes.","status":"succeeded"}`)\n    })\n\n    // Now inject client into your app and run your tests - they will use your\n    // local test server using this mux\n    app := App{\n        Stripe: client,\n    }\n    app.Run()\n    // ...\n}\n')))}f.isMDXComponent=!0}}]);