(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6999],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return n?i.createElement(h,o(o({ref:t},u),{},{components:n})):i.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4736:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var i=n(4034),r=n(9973),a=(n(7294),n(3905)),o=["components"],l={},c="Others",s={unversionedId:"Programming/Design Pattern/Principle/Misc",id:"Programming/Design Pattern/Principle/Misc",isDocsHomePage:!1,title:"Others",description:"There are many other principles that we may use in design.",source:"@site/docs/Programming/Design Pattern/Principle/Misc.md",sourceDirName:"Programming/Design Pattern/Principle",slug:"/Programming/Design Pattern/Principle/Misc",permalink:"/docs/Programming/Design Pattern/Principle/Misc",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LSP (Kiskov Subsitution Principle)",permalink:"/docs/Programming/Design Pattern/Principle/LSP"},next:{title:"OCP (Open-Closed Principle)",permalink:"/docs/Programming/Design Pattern/Principle/OCP"}},u=[{value:"Encapsulate what varies",id:"encapsulate-what-varies",children:[],level:2},{value:"Favor Composition over Inheritance",id:"favor-composition-over-inheritance",children:[{value:"Inheritance",id:"inheritance",children:[],level:3},{value:"Composition",id:"composition",children:[],level:3}],level:2},{value:"Least Knowledge Principle",id:"least-knowledge-principle",children:[],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"others"},"Others"),(0,a.kt)("p",null,"There are many other principles that we may use in design."),(0,a.kt)("h2",{id:"encapsulate-what-varies"},"Encapsulate what varies"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Encapsulate those codes that may be changed frequently, using interface to replace concrete class."),(0,a.kt)("li",{parentName:"ul"},"By using the same interface calling some same methods, you don't have to bother the actual implementation but focus on the funcionality. "),(0,a.kt)("li",{parentName:"ul"},"The polymorphism (dynamic binding) will help resolve the actual method in runtime.")),(0,a.kt)("h2",{id:"favor-composition-over-inheritance"},"Favor Composition over Inheritance"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Composition and Inheritance are all about code reuse."),(0,a.kt)("li",{parentName:"ul"},"But usually ",(0,a.kt)("inlineCode",{parentName:"li"},"Is-A")," relationship of Inheritance is too strong for most scenario."),(0,a.kt)("li",{parentName:"ul"},"Composition can be more flexible because it resolve the implementation at runtime instead of compile time.")),(0,a.kt)("h3",{id:"inheritance"},"Inheritance"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Advantage:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Easy for code reuse by simply using ",(0,a.kt)("inlineCode",{parentName:"li"},"extends")," keywork in many languages. This allows child classes immediately have nearly all functionalities that the parent class has."))),(0,a.kt)("li",{parentName:"ul"},"Disadvantage:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The modification of parent class will affect the child classes."),(0,a.kt)("li",{parentName:"ul"},"It cannot change the object at runtime but at compile time.")))),(0,a.kt)("h3",{id:"composition"},"Composition"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Advantage:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Have strong encapsulation by only exposing its interface without internal implementation."),(0,a.kt)("li",{parentName:"ul"},"It can combine new method implementation at runtime with ease."))),(0,a.kt)("li",{parentName:"ul"},"Disadvantage:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Less efficiency and you have to create much more fields (references of components) of the class.")))),(0,a.kt)("h2",{id:"least-knowledge-principle"},"Least Knowledge Principle"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Make a system loosely coupled."),(0,a.kt)("li",{parentName:"ul"},"loosely coupled: have minimum knowledge of other components, it only knows about others' interfaces (API)."),(0,a.kt)("li",{parentName:"ul"},"This can be achieved by strong encapsulation with several levels of access modifiers (public, package, protected, private). "),(0,a.kt)("li",{parentName:"ul"},"For internal attributes, you can add many getter and setter to add an additional layer of these attributes."),(0,a.kt)("li",{parentName:"ul"},"The least knowledge principle allow a class to hide its internal implementation by only exposing its interface. Thus it will not affect the outside world when it want to changes its details.")))}m.isMDXComponent=!0}}]);