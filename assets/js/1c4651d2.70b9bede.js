(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[941],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,k=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5769:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=n(4034),a=n(9973),l=(n(7294),n(3905)),i=["components"],o={},s="Multi-Container Pods",c={unversionedId:"Cloud/Kubernetes/Basics/Multi-Containers",id:"Cloud/Kubernetes/Basics/Multi-Containers",isDocsHomePage:!1,title:"Multi-Container Pods",description:"Namespaces",source:"@site/docs/Cloud/Kubernetes/Basics/Multi-Containers.md",sourceDirName:"Cloud/Kubernetes/Basics",slug:"/Cloud/Kubernetes/Basics/Multi-Containers",permalink:"/docs/Cloud/Kubernetes/Basics/Multi-Containers",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Minikube",permalink:"/docs/Cloud/Kubernetes/Basics/Minikube"},next:{title:"Overview",permalink:"/docs/Cloud/Kubernetes/Basics/Overview"}},u=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Application",id:"application",children:[],level:2},{value:"Source Code",id:"source-code",children:[],level:2},{value:"Issues",id:"issues",children:[],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"multi-container-pods"},"Multi-Container Pods"),(0,l.kt)("h2",{id:"namespaces"},"Namespaces"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Separate resources according to users, environment, or applications"),(0,l.kt)("li",{parentName:"ul"},"Role-based access control (RBAC) to secure access per namespace")),(0,l.kt)("h2",{id:"application"},"Application"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"3-tier architecture",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Support tier: ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"counter"),": HTTP Post, post random value to the server"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Poller"),": HTTP Get, get the value from the server and print the value"))),(0,l.kt)("li",{parentName:"ul"},"App tier:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Server"),": Handle request from support tier and data tier, also incrementing the counter"))),(0,l.kt)("li",{parentName:"ul"},"Data tier:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Redis"),": storing the counter value"))))),(0,l.kt)("li",{parentName:"ul"},"Configured using environment variables"),(0,l.kt)("li",{parentName:"ul"},"Public image")),(0,l.kt)("h2",{id:"source-code"},"Source Code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="3.1-namespace.yaml"',title:'"3.1-namespace.yaml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: microservice\n  labels:\n    app: counter\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="3.2-multi_containers.yaml"',title:'"3.2-multi_containers.yaml"'},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: app\nspec:\n  containers:\n    - name: redis\n      image: redis:latest\n      imagePullPolicy: IfNotPresent\n      ports:\n        - containerPort: 6379\n\n    - name: server\n      image: lrakai/microservices:server-v1\n      ports:\n        - containerPort: 8080\n      env:\n        - name: REDIS_URL\n          # This will work because all containers share the same local network\n          value: redis://localhost:6379\n\n    - name: counter\n      image: lrakai/microservices:counter-v1\n      env:\n        - name: API_URL\n          value: http://localhost:8080\n\n    - name: poller\n      image: lrakai/microservices:poller-v1\n      env:\n        - name: API_URL\n          value: http://localhost:8080\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Create the Pod")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create -f 3.1-namespace.yaml\n# Specify the namespace\nkubectl create -n microservice -f 3.2-multi_containers.yaml\n\n# Also, you can use apply -f (declarative way), like\n# kubectl apply -n microservice -f 3.2-multi_containers.yaml\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get Pod information")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get -n microservice pod app\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get more information")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl describe -n microservice pod app\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get logs of containers")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -n microservice app counter --tail 10\n\n# -f means follow, watch real-time logs\nkubectl logs -n microservice app poller -f\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Delete the Pod")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete -n microservice -f 3.2-multi_containers.yaml\n")),(0,l.kt)("h2",{id:"issues"},"Issues"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Can only scale proportionately because the minimal unit in k8s is pods"),(0,l.kt)("li",{parentName:"ul"},"Usually used in tightly-coupled components")))}m.isMDXComponent=!0}}]);