(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[6203],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,y=u["".concat(o,".").concat(d)]||u[d]||m[d]||l;return t?a.createElement(y,s(s({ref:n},c),{},{components:t})):a.createElement(y,s({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=u;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<l;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3943:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=t(4034),r=t(9973),l=(t(7294),t(3905)),s=["components"],i={},o="Deployments",p={unversionedId:"Cloud/Kubernetes/Basics/Deployments",id:"Cloud/Kubernetes/Basics/Deployments",isDocsHomePage:!1,title:"Deployments",description:"- Represend multiple replica of Pods",source:"@site/docs/Cloud/Kubernetes/Basics/Deployments.md",sourceDirName:"Cloud/Kubernetes/Basics",slug:"/Cloud/Kubernetes/Basics/Deployments",permalink:"/docs/Cloud/Kubernetes/Basics/Deployments",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ConfidMaps and Secrets",permalink:"/docs/Cloud/Kubernetes/Basics/Config"},next:{title:"Kubernetes Ecosystem",permalink:"/docs/Cloud/Kubernetes/Basics/Ecosystem"}},c=[{value:"Source Code",id:"source-code",children:[{value:"Explanation",id:"explanation",children:[],level:3}],level:2},{value:"Commands",id:"commands",children:[],level:2},{value:"References",id:"references",children:[],level:2}],m={toc:c};function u(e){var n=e.components,t=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"deployments"},"Deployments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Represend multiple replica of Pods"),(0,l.kt)("li",{parentName:"ul"},"Describe a desired state that Kubernetes needs to achieve"),(0,l.kt)("li",{parentName:"ul"},"Deployment Controller master component converge actual state to desired state")),(0,l.kt)("h2",{id:"source-code"},"Source Code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="5.1-namespace.yaml"',title:'"5.1-namespace.yaml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: deployments\n  labels:\n    app: counter\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="5.2-data_tier.yaml"',title:'"5.2-data_tier.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: data-tier\n  labels:\n    app: microservices\nspec:\n  ports:\n  - port: 6379\n    protocol: TCP # default\n    name: redis # optional when only 1 port\n  selector:\n    tier: data\n  type: ClusterIP # default\n---\napiVersion: apps/v1 # apps API group\nkind: Deployment\nmetadata:\n  name: data-tier\n  labels:\n    app: microservices\n    tier: data\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: data\n  template:\n    metadata:\n      labels:\n        app: microservices\n        tier: data\n    spec: # Pod spec\n      containers:\n      - name: redis\n        image: redis:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n          - containerPort: 6379\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="5.3-app_tier.yaml"',title:'"5.3-app_tier.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: app-tier\n  labels:\n    app: microservices\nspec:\n  ports:\n  - port: 8080\n  selector:\n    tier: app\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-tier\n  labels:\n    app: microservices\n    tier: app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: app\n  template:\n    metadata:\n      labels:\n        app: microservices\n        tier: app\n    spec:\n      containers:\n      - name: server\n        image: lrakai/microservices:server-v1\n        ports:\n          - containerPort: 8080\n        env:\n          - name: REDIS_URL\n            # Environment variable service discovery\n            # Naming pattern:\n            #   IP address: <all_caps_service_name>_SERVICE_HOST\n            #   Port: <all_caps_service_name>_SERVICE_PORT\n            #   Named Port: <all_caps_service_name>_SERVICE_PORT_<all_caps_port_name>\n            value: redis://$(DATA_TIER_SERVICE_HOST):$(DATA_TIER_SERVICE_PORT_REDIS)\n            # In multi-container example value was\n            # value: redis://localhost:6379\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="5.4-support_tier.yaml"',title:'"5.4-support_tier.yaml"'},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: support-tier\n  labels:\n    app: microservices\n    tier: support\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: support\n  template:\n    metadata:\n      labels:\n        app: microservices\n        tier: support\n    spec:\n        containers:\n        - name: counter\n          image: lrakai/microservices:counter-v1\n          env:\n            - name: API_URL\n              # DNS for service discovery\n              # Naming pattern:\n              #   IP address: <service_name>.<service_namespace>\n              #   Port: needs to be extracted from SRV DNS record\n              value: http://app-tier.deployments:8080\n\n        - name: poller\n          image: lrakai/microservices:poller-v1\n          env:\n            - name: API_URL\n              # omit namespace to only search in the same namespace\n              value: http://app-tier:$(APP_TIER_SERVICE_PORT)\n")),(0,l.kt)("h3",{id:"explanation"},"Explanation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"replicas"),": how many pods should this deployment maintains"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"template"),": the pod specification"),(0,l.kt)("li",{parentName:"ul"},"Kubernetes will try to bring the number of Pods to the ",(0,l.kt)("inlineCode",{parentName:"li"},"replicas")," to specify")),(0,l.kt)("h2",{id:"commands"},"Commands"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get deployments information")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n deployments get deployments\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get pods information")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n deployments get pods\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Scale deployment (this will become permanent until you delete this deployment)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n deployments scale deployments app-tier --replicas=5\nkubectl -n deployments scale deployments support-tier --replicas=5\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Delete pods")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Can delete several pods in the same command\nkubectl -n deployments delete pods <pod_name1> <pod_name2>\n\n# Note that k8s will maintain the replica number, so you will find other new pods are up and running\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Monitor ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Install watch using: brew install watch\nwatch kubectl -n deployments get pods\n")),(0,l.kt)("h2",{id:"references"},"References"))}u.isMDXComponent=!0}}]);