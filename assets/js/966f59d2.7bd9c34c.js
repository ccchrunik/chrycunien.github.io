(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[8419],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(t),p=a,m=h["".concat(l,".").concat(p)]||h[p]||d[p]||o;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},817:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return h}});var r=t(4034),a=t(9973),o=(t(7294),t(3905)),i=["components"],s={},l="Local User",c={unversionedId:"Linux/Script/Project/Local-User",id:"Linux/Script/Project/Local-User",isDocsHomePage:!1,title:"Local User",description:"These scripts will automatically create default user.",source:"@site/docs/Linux/Script/Project/Local-User.md",sourceDirName:"Linux/Script/Project",slug:"/Linux/Script/Project/Local-User",permalink:"/docs/Linux/Script/Project/Local-User",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sleep",permalink:"/docs/Linux/Script/Commands/Sleep"},next:{title:"Generate Random Password",permalink:"/docs/Linux/Script/Project/Random"}},u=[{value:"Create User",id:"create-user",children:[{value:"Version 1",id:"version-1",children:[],level:3},{value:"Version 2",id:"version-2",children:[],level:3},{value:"Version 3",id:"version-3",children:[],level:3}],level:2},{value:"Delete User",id:"delete-user",children:[{value:"Command",id:"command",children:[],level:3},{value:"Example",id:"example",children:[],level:3},{value:"A Complex Example",id:"a-complex-example",children:[],level:3}],level:2},{value:"Disable Users",id:"disable-users",children:[{value:"Chage",id:"chage",children:[],level:3},{value:"Passwd",id:"passwd",children:[],level:3},{value:"Nologin",id:"nologin",children:[],level:3}],level:2},{value:"References",id:"references",children:[],level:2}],d={toc:u};function h(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"local-user"},"Local User"),(0,o.kt)("p",null,"These scripts will automatically create default user."),(0,o.kt)("h2",{id:"create-user"},"Create User"),(0,o.kt)("h3",{id:"version-1"},"Version 1"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Read user input using prompt."),(0,o.kt)("li",{parentName:"ul"},"Require user to input name, comment, and password."),(0,o.kt)("li",{parentName:"ul"},"Force user to change password when first login."),(0,o.kt)("li",{parentName:"ul"},"Display the account information at last.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Make sure this script is executed by root\nif [[ "${UID}" -ne 0 ]]\nthen\n  echo \'You are not root\'\n  exit 1\nfi\n\n# Enter username\nread -p "Enter your username: " USER_NAME\n\n# Enter name for the account\nread -p "Enter the real name for this user or application: " COMMENT\n\n# Enter password\nread -p "Enter your password: " PASSWORD\n\n# Create a new user\nuseradd -c "${COMMENT}" -m "${USER_NAME}"\n\n# Set default password\necho ${PASSWORD} | passwd --stdin ${USER_NAME}\n\n# Check if the creation of user success or not\nif [[ "${?}" -ne 0 ]]\nthen\n  echo \'The account could not be created!\'\n  exit 1\nfi\n\n# Force password change on first login.\npasswd -e ${USER_NAME}\n\necho "Your username is: ${USER_NAME}"\necho "Your default password is: ${PASSWORD}"\necho "Your host is: ${HOSTNAME}"\n')),(0,o.kt)("h3",{id:"version-2"},"Version 2"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use command-line argument for user input instead of prompt."),(0,o.kt)("li",{parentName:"ul"},"Add usage info."),(0,o.kt)("li",{parentName:"ul"},"Auto-generate password by default.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Make sure this script is executed by root\nif [[ "${UID}" -ne 0 ]]\nthen\n  echo \'Please run with sudo or root\'\n  exit 1\nfi\n\nif [[ "${#}" -ne 3 ]]\nthen\n  echo "Usage: ${0} USER_NAME [COMMENT]..."\n  echo "Create an account on local user system by providing username and comments field"\n  exit 1\nfi\n\nUSER_NAME="${1}"\n\n# Shift out the USER_NAME\nshift\nCOMMENT="${*}"\n\nSPECIAL_CHARACTER=$(echo \'!@#$%^&*()_-+=\' | fold -w1 | shuf | head -c1)\nPASSWORD="$(date +%s%N${RANDOM}${RANDOM} | sha256sum | head -c48)${SPECIAL_CHARACTER}"\n\n# Create a new user\nuseradd -c "${COMMENT}" -m "${USER_NAME}"\n\n# Set default password\necho ${PASSWORD} | passwd --stdin ${USER_NAME}\n\n# Check if the creation of user success or not\nif [[ "${?}" -ne 0 ]]\nthen\n  echo \'The account could not be created!\'\n  exit 1\nfi\n\n# Force password change on first login.\npasswd -e ${USER_NAME}\n\necho "Your username is: ${USER_NAME}"\necho "Your default password is: ${PASSWORD}"\necho "Your host is: ${HOSTNAME}"\n')),(0,o.kt)("h3",{id:"version-3"},"Version 3"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Output error messages to ",(0,o.kt)("inlineCode",{parentName:"li"},"STDERR")),(0,o.kt)("li",{parentName:"ul"},"Suppress outputs of other commands (",(0,o.kt)("inlineCode",{parentName:"li"},"&> /dev/null"),")")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Make sure this script is executed by root\nif [[ "${UID}" -ne 0 ]]\nthen\n  echo \'Please run with sudo or root\' >&2\n  exit 1\nfi\n\nif [[ "${#}" -ne 3 ]]\nthen\n  echo "Usage: ${0} USER_NAME [COMMENT]..." >&2\n  echo "Create an account on local user system by providing username and comments field" >&2\n  exit 1\nfi\n\nUSER_NAME="${1}"\n\n# Shift out the USER_NAME\nshift\nCOMMENT="${*}"\n\nSPECIAL_CHARACTER=$(echo \'!@#$%^&*()_-+=\' | fold -w1 | shuf | head -c1)\nPASSWORD="$(date +%s%N${RANDOM}${RANDOM} | sha256sum | head -c48)${SPECIAL_CHARACTER}"\n\n# Create a new user\nuseradd -c "${COMMENT}" -m "${USER_NAME}" &> /dev/null\n\n# Set default password\necho ${PASSWORD} | passwd --stdin ${USER_NAME} &> /dev/null\n\n# Check if the creation of user success or not\nif [[ "${?}" -ne 0 ]]\nthen\n  echo \'The account could not be created!\' >&2\n  exit 1\nfi\n\n# Force password change on first login.\npasswd -e ${USER_NAME} &> /dev/null\n\necho "Your username is: ${USER_NAME}"\necho "Your default password is: ${PASSWORD}"\necho "Your host is: ${HOSTNAME}"\nexit 0\n')),(0,o.kt)("h2",{id:"delete-user"},"Delete User"),(0,o.kt)("h3",{id:"command"},"Command"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"userdel")," is used to delete user. (only used by root user)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# You cannot find user in normal node\n# That is because it is a system command, \n# which is located under /usr/sbin instead of /usr/bin\n$ type -a userdel\n-bash: type: userdel: not found\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-f")," forcibly remove remove user and it's home directory and mail pool even if the user is logged in. (Hence dangerous)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-r")," remove user and it's home directory and mail pool")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Usage: ",(0,o.kt)("inlineCode",{parentName:"li"},"sudo ./delete-user.sh"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# This script deletes a user.\n\n# Run as root.\nif [[ "${UID}" -ne 0 ]]\nthen\n   echo \'Please run with sudo or as root.\' >&2\n   exit 1\nfi\n\n# Assume the first argument is the user to delete.\nUSER="${1}"\n\n# Delete the user.\nuserdel ${USER}\n\n# Make sure the user got deleted.\nif [[ "${?}" -ne 0 ]]\nthen\n  echo "The account ${USER} was NOT deleted." >&2\n  exit 1\nfi\n\n# Tell the user the account was deleted.\necho "The account ${USER} was deleted."\n\nexit 0\n')),(0,o.kt)("h3",{id:"a-complex-example"},"A Complex Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First, it checks for root privilege."),(0,o.kt)("li",{parentName:"ul"},"Next, it parse arguments to determine whether to ",(0,o.kt)("inlineCode",{parentName:"li"},"delete"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"remove"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"archive"),"."),(0,o.kt)("li",{parentName:"ul"},"Plus, it checks that the user is not a system user."),(0,o.kt)("li",{parentName:"ul"},"You have to give at least 1 user."),(0,o.kt)("li",{parentName:"ul"},"Last, it will perform processing and checks for result and then display the performed actions.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#/usr/bin/env bash\n\nreadonly ARCHIVE_DIR=\'/archive\'\n\n# Usage function to tell user how to use the script\nusage() {\n  echo "Usage ${0} [-dra] USER [USERN]..." >&2\n  echo "Disable accounts." >&2\n  echo "  -d   Deletes accounts instead of disable them" >&2\n  echo "  -r   Rremoves the home directory associated with the accounts" >&2\n  echo "  -a   Creates an archive of the home directory with the accounts" >&2\n  echo "       and stores the archive in /archives directory." >&2\n  exit 1\n}\n\n# Check if the user exists and not a system user\ncheck_id() {\n  USER_ID=$(id -u "${1}")\n  if [[ "${?}" -ne 0 ]]\n  then\n    echo "Account ${1} does not exist!" >&2\n    exit 1\n  fi\n\n  if [[ "${USER_ID}" -lt 1000  ]]\n  then\n    echo "Should not delete system account: ${1}" >&2\n    exit 1\n  fi\n}\n\narchive() {\n  local HOME_DIR="/home/${1}"\n  local ARCHIVE_FILE="${ARCHIVE_DIR}/${1}.tar.gz"\n\n  if [[ "${ARCHIVE}" = \'true\' ]] ; then\n    if [[ ! -d "${ARCHIVE_DIR}" ]] ; then\n      echo "Archive Directory does not exist!" >&2\n      exit 1\n    fi \n\n    tar -zcf "${ARCHIVE_FILE}" "${HOME_DIR}" 2>&1 > /dev/null\n    if [[ "${?}" -ne 0 ]] ; then\n      echo "Failed to create archive ${ARCHIVE_FILE}!" >&2\n      exit 1\n    fi\n    echo "Successfully archive account ${1} to ${ARCHIVE_FILE}!" >&2\n  fi\n}\n\ndelete() {\n  userdel "${REMOVE}""${1}"\n  if [[ "${?}" -ne 0 ]] ; then\n    echo "Failed to delete account ${1}!" >&2\n    exit 1\n  fi\n  echo "Successfully delete account ${1}!" >&2\n}\n\ndisable() {\n  chage -E 0 "${1}"\n  if [[ "${?}" -ne 0 ]] ; then\n    echo "Failed to disable account ${1}!" >&2\n    exit 1\n  fi\n  echo "Successfully disable account ${1}!" >&2\n}\n\n# Check if the user has root privilege\nif [[ "${UID}" -ne 0 ]]\nthen\n  echo "You are not root!" >&2\n  exit 1\nfi\n\n# Parse arguments\nwhile getopts \'dra\' flag; do\n  case "${flag}" in\n    d) DELETE=\'true\' ;;\n    r) REMOVE=\'-r\' ;;\n    a) ARCHIVE=\'true\' ;;\n    ?) usage ;;\n  esac\ndone\n\n# Get extra arguments\nshift "$(( $OPTIND - 1 ))"\n\nif [[ "${#}" -eq 0 ]]\nthen\n  echo "You have to give at least one account name!" >&2\n  usage\nfi\n\n# Archive users home directories\nif [[ ! -d "${ARCHIVE_DIR}" ]]; then\n  mkdir -p "${ARCHIVE_DIR}"\n  if [[ "${?}" -ne 0 ]] ; then\n    echo "Failed to create archive directory: ${ARCHIVE_DIR}!" >&2\n    exit 1\n  fi\nfi\n\n# Process commands\nfor USERNAME in "${@}"; do\n  echo "Processing user: ${USERNAME}" >&2\n\n  # Check Account UID\n  check_id "${USERNAME}"\n\n  # Make archive for this user\n  archive "${USERNAME}"\n\n  if [[ "${DELETE}" = \'true\' ]] ; then\n    delete "${USERNAME}"\n  else\n    disable "${USERNAME}"\n  fi\ndone\n')),(0,o.kt)("h2",{id:"disable-users"},"Disable Users"),(0,o.kt)("h3",{id:"chage"},"Chage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"chage")," is the command to set the expire date of an account."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0")," means disable right now."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-1")," means never disable.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Disable\n$ sudo chage -E 0 wizard\n\n# Permanently enable\n$ sudo chage -E -1 wizard\n")),(0,o.kt)("h3",{id:"passwd"},"Passwd"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"passwd")," is another way to disable accounts."),(0,o.kt)("li",{parentName:"ul"},"However, it won't disable ssh access, so prevent to use it.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Lock user\n$ sudo passwd -l wizard\n\n# Unlock user\n$ sudo passwd -u wizard\n")),(0,o.kt)("h3",{id:"nologin"},"Nologin"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The last way is to set the default login shell to ",(0,o.kt)("inlineCode",{parentName:"li"},"nologin")," so that it cannot perform login action.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo usermod -s /sbin/nologin wizard\n")),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://cloudacademy.com/course/shell-scripting-user-account-creation-1517/"},"https://cloudacademy.com/course/shell-scripting-user-account-creation-1517/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://cloudacademy.com/course/shell-scripting-parsing-command-line-options-1520"},"https://cloudacademy.com/course/shell-scripting-parsing-command-line-options-1520"))))}h.isMDXComponent=!0}}]);