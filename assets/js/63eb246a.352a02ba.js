(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[4836],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),m=u(t),p=i,b=m["".concat(s,".").concat(p)]||m[p]||c[p]||l;return t?r.createElement(b,o(o({ref:n},d),{},{components:t})):r.createElement(b,o({ref:n},d))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=m;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7099:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return m}});var r=t(4034),i=t(9973),l=(t(7294),t(3905)),o=["components"],a={},s="Go Builder Patterns",u={unversionedId:"Programming/Design Pattern/Patterns/Builder/Go",id:"Programming/Design Pattern/Patterns/Builder/Go",isDocsHomePage:!1,title:"Go Builder Patterns",description:"String Builder",source:"@site/docs/Programming/Design Pattern/Patterns/Builder/Go.md",sourceDirName:"Programming/Design Pattern/Patterns/Builder",slug:"/Programming/Design Pattern/Patterns/Builder/Go",permalink:"/docs/Programming/Design Pattern/Patterns/Builder/Go",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/Programming/Design Pattern/Patterns/Bridge/Overview"},next:{title:"Java Builder Patterns",permalink:"/docs/Programming/Design Pattern/Patterns/Builder/Java"}},d=[{value:"String Builder",id:"string-builder",children:[],level:2},{value:"HTML builder",id:"html-builder",children:[],level:2},{value:"Faceted Builder",id:"faceted-builder",children:[],level:2},{value:"Force to use builder",id:"force-to-use-builder",children:[],level:2},{value:"Functional Builder",id:"functional-builder",children:[],level:2},{value:"Code Reuse",id:"code-reuse",children:[{value:"Examples",id:"examples",children:[],level:3},{value:"Disadvatanges",id:"disadvatanges",children:[],level:3}],level:2},{value:"References",id:"references",children:[],level:2}],c={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"go-builder-patterns"},"Go Builder Patterns"),(0,l.kt)("h2",{id:"string-builder"},"String Builder"),(0,l.kt)("p",null,"This code snippets use string builder to construct a html document."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  hello := "hello"\n  sb := strings.Builder{}\n  sb.WriteString("<p>")\n  sb.WriteString(hello)\n  sb.WriteString("</p>")\n  fmt.Printf("%s\\n", sb.String())\n\n  words := []string{"hello", "world"}\n  sb.Reset()\n  // <ul><li>...</li><li>...</li><li>...</li></ul>\'\n  sb.WriteString("<ul>")\n  for _, v := range words {\n    sb.WriteString("<li>")\n    sb.WriteString(v)\n    sb.WriteString("</li>")\n  }\n  sb.WriteString("</ul>")\n  fmt.Println(sb.String())\n}\n')),(0,l.kt)("h2",{id:"html-builder"},"HTML builder"),(0,l.kt)("p",null,"This code snippet create a html builder to create a html document. You can see that it's much more simpler to construct a html file that using the basix string builder (although it use string builder behind the scene)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'const (\n  indentSize = 2\n)\n\ntype HtmlElement struct {\n  name, text string\n  elements []HtmlElement\n}\n\nfunc (e *HtmlElement) String() string {\n  return e.string(0)\n}\n\nfunc (e *HtmlElement) string(indent int) string {\n  sb := strings.Builder{}\n  i := strings.Repeat(" ", indentSize * indent)\n  sb.WriteString(fmt.Sprintf("%s<%s>\\n",\n    i, e.name))\n  if len(e.text) > 0 {\n    sb.WriteString(strings.Repeat(" ",\n      indentSize * (indent + 1)))\n    sb.WriteString(e.text)\n    sb.WriteString("\\n")\n  }\n\n  for _, el := range e.elements {\n    sb.WriteString(el.string(indent+1))\n  }\n  sb.WriteString(fmt.Sprintf("%s</%s>\\n",\n    i, e.name))\n  return sb.String()\n}\n\ntype HtmlBuilder struct {\n  rootName string\n  root HtmlElement\n}\n\nfunc NewHtmlBuilder(rootName string) *HtmlBuilder {\n  b := HtmlBuilder{rootName,\n    HtmlElement{rootName, "", []HtmlElement{}}}\n  return &b\n}\n\nfunc (b *HtmlBuilder) String() string {\n  return b.root.String()\n}\n\nfunc (b *HtmlBuilder) AddChild(\n  childName, childText string) {\n  e := HtmlElement{childName, childText, []HtmlElement{}}\n  b.root.elements = append(b.root.elements, e)\n}\n\nfunc (b *HtmlBuilder) AddChildFluent(\n  childName, childText string) *HtmlBuilder {\n  e := HtmlElement{childName, childText, []HtmlElement{}}\n  b.root.elements = append(b.root.elements, e)\n  return b\n}\n\nfunc main() {\n  b := NewHtmlBuilder("ul")\n  b.AddChildFluent("li", "hello").\n    AddChildFluent("li", "world")\n  fmt.Println(b.String())\n}\n')),(0,l.kt)("h2",{id:"faceted-builder"},"Faceted Builder"),(0,l.kt)("p",null,"Sometimes we have many field to initialize, we can separate them into multiple builder to make the initialization easier."),(0,l.kt)("p",null,"First, we create a ",(0,l.kt)("inlineCode",{parentName:"p"},"Person")," struct and a ",(0,l.kt)("inlineCode",{parentName:"p"},"PersonBuilder")," and add some utility functions to it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"type Person struct {\n  // Address\n  StreetAddress, Postcode, City string\n\n  // Job\n  CompanyName, Position string\n  AnnualIncome int\n}\n\ntype PersonBuilder struct {\n  person *Person // needs to be inited\n}\n\nfunc NewPersonBuilder() *PersonBuilder {\n  return &PersonBuilder{&Person{}}\n}\n\nfunc (it *PersonBuilder) Build() *Person {\n  return it.person\n}\n\nfunc (it *PersonBuilder) Works() *PersonJobBuilder {\n  return &PersonJobBuilder{*it}\n}\n\nfunc (it *PersonBuilder) Lives() *PersonAddressBuilder {\n  return &PersonAddressBuilder{*it}\n}\n")),(0,l.kt)("p",null,"And actually, because ",(0,l.kt)("inlineCode",{parentName:"p"},"PersonJobBuilder")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"PersonAddressBuilder")," just like a ",(0,l.kt)("inlineCode",{parentName:"p"},"PersonBuilder")," (see Go's struct prompted fields for further understanding.) They can use functions defined in ",(0,l.kt)("inlineCode",{parentName:"p"},"PersonBuilder"),", which acts as inheritance features in OOP language."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"type PersonJobBuilder struct {\n  PersonBuilder\n}\n\nfunc (pjb *PersonJobBuilder) At(\n  companyName string) *PersonJobBuilder {\n  pjb.person.CompanyName = companyName\n  return pjb\n}\n\nfunc (pjb *PersonJobBuilder) AsA(\n  position string) *PersonJobBuilder {\n  pjb.person.Position = position\n  return pjb\n}\n\nfunc (pjb *PersonJobBuilder) Earning(\n  annualIncome int) *PersonJobBuilder {\n  pjb.person.AnnualIncome = annualIncome\n  return pjb\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"type PersonAddressBuilder struct {\n  PersonBuilder\n}\n\nfunc (it *PersonAddressBuilder) At(\n  streetAddress string) *PersonAddressBuilder {\n  it.person.StreetAddress = streetAddress\n  return it\n}\n\nfunc (it *PersonAddressBuilder) In(\n  city string) *PersonAddressBuilder {\n  it.person.City = city\n  return it\n}\n\nfunc (it *PersonAddressBuilder) WithPostcode(\n  postcode string) *PersonAddressBuilder {\n  it.person.Postcode = postcode\n  return it\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n  pb := NewPersonBuilder()\n  pb.\n    Lives().\n      At("123 London Road").\n      In("London").\n      WithPostcode("SW12BC").\n    Works().\n      At("Fabrikam").\n      AsA("Programmer").\n      Earning(123000)\n  person := pb.Build()\n  fmt.Println(*person)\n}\n')),(0,l.kt)("h2",{id:"force-to-use-builder"},"Force to use builder"),(0,l.kt)("p",null,"The email builder provides a ",(0,l.kt)("inlineCode",{parentName:"p"},"SendEmail")," wrapper function to guard against the direct creation without using the builder."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type email struct {\n    from, to, subject, body string\n}\n\ntype EmailBuilder struct {\n    email email\n}\n\nfunc (b *EmailBuilder) From(from string) *EmailBuilder {\n    if !strings.Contains(from, "@") {\n        panic("email should contain @")\n    }\n    b.email.from = from\n    return b\n}\n\nfunc (b *EmailBuilder) To(to string) *EmailBuilder {\n    b.email.to = to\n    return b\n}\n\nfunc (b *EmailBuilder) Subject(subject string) *EmailBuilder {\n    b.email.subject = subject\n    return b\n}\n\nfunc (b *EmailBuilder) Body(body string) *EmailBuilder {\n    b.email.body = body\n    return b\n}\n\nfunc sendMailImpl(email *email) {\n    // actually ends the email\n}\n\ntype build func(*EmailBuilder)\nfunc SendEmail(action build) {\n    builder := EmailBuilder{}\n    action(&builder)\n    sendMailImpl(&builder.email)\n}\n\nfunc main() {\n    SendEmail(func(b *EmailBuilder) {\n        b.From("foo@bar.com").\n            To("bar@baz.com").\n            Subject("Meeting").\n            Body("Hello, do you want to meet?")\n    })\n}\n')),(0,l.kt)("h2",{id:"functional-builder"},"Functional Builder"),(0,l.kt)("p",null,"This builder demostrate the builder using functional style."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type Person struct {\n  name, position string\n}\n\ntype personMod func(*Person)\ntype PersonBuilder struct {\n  actions []personMod\n}\n\nfunc (b *PersonBuilder) Called(name string) *PersonBuilder {\n  b.actions = append(b.actions, func(p *Person) {\n    p.name = name\n  })\n  return b\n}\n\nfunc (b *PersonBuilder) Build() *Person {\n  p := Person{}\n  for _, a := range b.actions {\n    a(&p)\n  }\n  return &p\n}\n\n// extend PersonBuilder\nfunc (b *PersonBuilder) WorksAsA(position string) *PersonBuilder {\n  b.actions = append(b.actions, func(p *Person) {\n    p.position = position\n  })\n  return b\n}\n\nfunc main() {\n  b := PersonBuilder{}\n  p := b.Called("Dmitri").WorksAsA("dev").Build()\n  fmt.Println(*p)\n}\n')),(0,l.kt)("h2",{id:"code-reuse"},"Code Reuse"),(0,l.kt)("p",null,"Because Go does not support inheritance like in Java, its builder pattern will be slightly different. In addition, Go lacks constructor and access modifier, which makes it harder to encapsulate, so actually you have direct access to the field of a type. We still can break the instantiation process by adding several setters like we did in Java. If you want to achieve same effect in Java, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"sync.Once"),"."),(0,l.kt)("p",null,"Therefore, we will focus on how to reuse codes in the following examples."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("p",null,"This example use an interface ",(0,l.kt)("inlineCode",{parentName:"p"},"BuildProcess")," to abstract the construction of a vehicle. By adding a ",(0,l.kt)("inlineCode",{parentName:"p"},"ManufacturingDirector"),", we reuse the construction process and only need to pass a different builder to this director. Then we can make a car in a simple way."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'type BuildProcess interface {\n    SetWheels() BuildProcess\n    SetSeats() BuildProcess\n    SetStructure() BuildProcess\n    GetVehicle() VehicleProduct\n}\n\n//Director\ntype ManufacturingDirector struct {\n    builder BuildProcess\n}\n\nfunc (f *ManufacturingDirector) Construct() {\n    f.builder.SetSeats().SetStructure().SetWheels()\n}\n\nfunc (f *ManufacturingDirector) SetBuilder(b BuildProcess) {\n    f.builder = b\n}\n\n//Product\ntype VehicleProduct struct {\n    Wheels    int\n    Seats     int\n    Structure string\n}\n\n//A Builder of type car\ntype CarBuilder struct {\n    v VehicleProduct\n}\n\nfunc (c *CarBuilder) SetWheels() BuildProcess {\n    c.v.Wheels = 4\n    return c\n}\n\nfunc (c *CarBuilder) SetSeats() BuildProcess {\n    c.v.Seats = 5\n    return c\n}\n\nfunc (c *CarBuilder) SetStructure() BuildProcess {\n    c.v.Structure = "Car"\n    return c\n}\n\nfunc (c *CarBuilder) GetVehicle() VehicleProduct {\n    return c.v\n}\n\n//A Builder of type motorbike\ntype BikeBuilder struct {\n    v VehicleProduct\n}\n\nfunc (b *BikeBuilder) SetWheels() BuildProcess {\n    b.v.Wheels = 2\n    return b\n}\n\nfunc (b *BikeBuilder) SetSeats() BuildProcess {\n    b.v.Seats = 2\n    return b\n}\n\nfunc (b *BikeBuilder) SetStructure() BuildProcess {\n    b.v.Structure = "Motorbike"\n    return b\n}\n\nfunc (b *BikeBuilder) GetVehicle() VehicleProduct {\n    return b.v\n}\n')),(0,l.kt)("p",null,"Demo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="builder_test.go"',title:'"builder_test.go"'},'manufacturingComplex := ManufacturingDirector{}\n\ncarBuilder := &CarBuilder{}\nmanufacturingComplex.SetBuilder(carBuilder)\nmanufacturingComplex.Construct()\n\ncar := carBuilder.GetVehicle()\n\nif car.Wheels != 4 {\n    t.Errorf("Wheels on a car must be 4 and they were %d\\n", car.Wheels)\n}\n\nif car.Structure != "Car" {\n    t.Errorf("Structure on a car must be \'Car\' and was %s\\n", car.Structure)\n}\n\nif car.Seats != 5 {\n    t.Errorf("Seats on a car must be 5 and they were %d\\n", car.Seats)\n}\n\nbikeBuilder := &BikeBuilder{}\n\nmanufacturingComplex.SetBuilder(bikeBuilder)\nmanufacturingComplex.Construct()\n\nmotorbike := bikeBuilder.GetVehicle()\nmotorbike.Seats = 1\n\nif motorbike.Wheels != 2 {\n    t.Errorf("Wheels on a motorbike must be 2 and they were %d\\n", motorbike.Wheels)\n}\n\nif motorbike.Structure != "Motorbike" {\n    t.Errorf("Structure on a motorbike must be \'Motorbike\' and was %s\\n", motorbike.Structure)\n}\n')),(0,l.kt)("h3",{id:"disadvatanges"},"Disadvatanges"),(0,l.kt)("p",null,"In Go, it is not as flexible in Java because Go does not support some features. Thus, try to avoid using builder if the build interface is not stable, or it will affect a lot of existing code (in order to satisfy the interface)."),(0,l.kt)("h2",{id:"references"},"References"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.udemy.com/course/design-patterns-go"},"https://www.udemy.com/course/design-patterns-go")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/PacktPublishing/Go-Design-Patterns/blob/master/Chapter02/builder.go"},"https://github.com/PacktPublishing/Go-Design-Patterns/blob/master/Chapter02/builder.go")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/PacktPublishing/Go-Design-Patterns/blob/master/Chapter02/builder_test.go"},"https://github.com/PacktPublishing/Go-Design-Patterns/blob/master/Chapter02/builder_test.go"))))}m.isMDXComponent=!0}}]);