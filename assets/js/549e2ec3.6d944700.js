(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[8497],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return s},kt:function(){return d}});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),u=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=u(e.components);return t.createElement(c.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(r),d=i,p=m["".concat(c,".").concat(d)]||m[d]||f[d]||a;return r?t.createElement(p,o(o({ref:n},s),{},{components:r})):t.createElement(p,o({ref:n},s))}));function d(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5362:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return m}});var t=r(4034),i=r(9973),a=(r(7294),r(3905)),o=["components"],l={},c="Read",u={unversionedId:"Linux/System Programming/File System/Read",id:"Linux/System Programming/File System/Read",isDocsHomePage:!1,title:"Read",description:"ReadFile function",source:"@site/docs/Linux/System Programming/File System/Read.md",sourceDirName:"Linux/System Programming/File System",slug:"/Linux/System Programming/File System/Read",permalink:"/docs/Linux/System Programming/File System/Read",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Path",permalink:"/docs/Linux/System Programming/File System/Path"},next:{title:"Archive",permalink:"/docs/Linux/Script/Commands/Archive"}},s=[{value:"<code>ReadFile</code> function",id:"readfile-function",children:[],level:2},{value:"<code>Reader</code> Interface",id:"reader-interface",children:[],level:2},{value:"Read by buffer",id:"read-by-buffer",children:[],level:2},{value:"Using buffer",id:"using-buffer",children:[],level:2}],f={toc:s};function m(e){var n=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,t.Z)({},f,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"read"},"Read"),(0,a.kt)("h2",{id:"readfile-function"},(0,a.kt)("inlineCode",{parentName:"h2"},"ReadFile")," function"),(0,a.kt)("p",null,"This function in ",(0,a.kt)("inlineCode",{parentName:"p"},"io/ioutil")," package use a small 512 bytes buffer to read a file, and it load the whole content into the memory. It may not be a good idea when reading large files. We will use buffer to address this problem."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "io/ioutil"\n    "os"\n)\n\nfunc main() {\n    if len(os.Args) != 2 {\n        fmt.Println("Please specify a path.")\n        return\n    }\n    b, err := ioutil.ReadFile(os.Args[1])\n    if err != nil {\n        fmt.Println("Error:", err)\n    }\n    fmt.Println(string(b))\n}\n\n')),(0,a.kt)("h2",{id:"reader-interface"},(0,a.kt)("inlineCode",{parentName:"h2"},"Reader")," Interface"),(0,a.kt)("p",null,"The reader interface define a method that is able to read file chunk by chunk. This make the ",(0,a.kt)("inlineCode",{parentName:"p"},"Reader")," more memory-efficient than the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadFile")," function. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Read")," function fill the given buffer and return how many bytes it read. One special error is ",(0,a.kt)("inlineCode",{parentName:"p"},"EOF")," (End of File) (",(0,a.kt)("inlineCode",{parentName:"p"},"io.EOF"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type Reader interface {\n    Read(p []byte) (n int, err error)\n}\n")),(0,a.kt)("h2",{id:"read-by-buffer"},"Read by buffer"),(0,a.kt)("p",null,"We use the buffer to read a file. In a long-run program, we have to close the unneed file to prevent reaching the file limit."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ulimit -u")," shows how many files can be opened by a process."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lsof -p <PID>")," shows the number of current opened files of a process.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    if len(os.Args) != 2 {\n        fmt.Println("Please specify a file")\n        return\n    }\n    f, err := os.Open(os.Args[1])\n    if err != nil {\n        fmt.Println("Error:", err)\n        return\n    }\n    defer f.Close() // we ensure close to avoid leaks\n\n    var (\n        b = make([]byte, 1024)\n    )\n    for n := 0; err == nil; {\n        n, err = f.Read(b)\n        if err == nil {\n            fmt.Print(string(b[:n])) // only print what\'s been read\n        }\n    }\n    if err != nil && err != io.EOF { // we expect an EOF\n        fmt.Println("\\n\\nError:", err)\n    }\n}\n')),(0,a.kt)("h2",{id:"using-buffer"},"Using buffer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "bytes"\n    "fmt"\n)\n\nfunc main() {\n    var b = bytes.NewBuffer([]byte{})\n    var texts = []string{\n        `As he came into the window`,\n        `It was the sound of a crescendo\nHe came into her apartment`,\n        `He left the bloodstains on the carpet`,\n        `She ran underneath the table\nHe could see she was unable\nSo she ran into the bedroom\nShe was struck down, it was her doom`,\n    }\n    for i := range texts {\n        b.Reset()\n        b.WriteString(texts[i])\n        fmt.Println("Length:", b.Len(), "\\tCapacity:", b.Cap())\n    }\n}\n\n')))}m.isMDXComponent=!0}}]);