(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9345],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,f=d["".concat(s,".").concat(p)]||d[p]||m[p]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3159:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],l={},s="Volumes",u={unversionedId:"Cloud/Kubernetes/Basics/Volumes",id:"Cloud/Kubernetes/Basics/Volumes",isDocsHomePage:!1,title:"Volumes",description:"Motivation",source:"@site/docs/Cloud/Kubernetes/Basics/Volumes.md",sourceDirName:"Cloud/Kubernetes/Basics",slug:"/Cloud/Kubernetes/Basics/Volumes",permalink:"/docs/Cloud/Kubernetes/Basics/Volumes",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Services",permalink:"/docs/Cloud/Kubernetes/Basics/Services"},next:{title:"Charts",permalink:"/docs/Cloud/Kubernetes/Helm/Charts"}},c=[{value:"Motivation",id:"motivation",children:[]},{value:"Types",id:"types",children:[{value:"Volumes",id:"volumes-1",children:[]},{value:"Persistent Volumes",id:"persistent-volumes",children:[]},{value:"Persisten Volume Claims",id:"persisten-volume-claims",children:[]}]},{value:"Source Code",id:"source-code",children:[]},{value:"Commands",id:"commands",children:[]},{value:"References",id:"references",children:[]}],m={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"volumes"},"Volumes"),(0,i.kt)("h2",{id:"motivation"},"Motivation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sometimes useful to share data between containers in a pod"),(0,i.kt)("li",{parentName:"ul"},"Lifetime of container file systems is limited to containers' lifetime")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Volumes and Persistent Volumes"),(0,i.kt)("li",{parentName:"ul"},"Used by mounting a directory to containers in the pod"),(0,i.kt)("li",{parentName:"ul"},"Pods can use multiple volumes"),(0,i.kt)("li",{parentName:"ul"},"The difference between them is how lifetime is managed")),(0,i.kt)("h3",{id:"volumes-1"},"Volumes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Volumes are tied to a Pod and its lifecycle"),(0,i.kt)("li",{parentName:"ul"},"Share data between containers and tolerate containers restart"),(0,i.kt)("li",{parentName:"ul"},"Use for non-durable storage that is deleted with the Pod"),(0,i.kt)("li",{parentName:"ul"},"Default type is ",(0,i.kt)("inlineCode",{parentName:"li"},"emptyDir")),(0,i.kt)("li",{parentName:"ul"},"Data is lost when the pod is reschedule to another node")),(0,i.kt)("h3",{id:"persistent-volumes"},"Persistent Volumes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Managed by Kubernetes"),(0,i.kt)("li",{parentName:"ul"},"Independent of Pods' lifetime"),(0,i.kt)("li",{parentName:"ul"},"Pods claim Persisten Volumes to use throughout their lifetime"),(0,i.kt)("li",{parentName:"ul"},"Can be mounted by multiple pods on different nodes if underlying storage supports it"),(0,i.kt)("li",{parentName:"ul"},"Can be provisioned statically in advance or or dynamically on demand")),(0,i.kt)("h3",{id:"persisten-volume-claims"},"Persisten Volume Claims"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Describe a Pod's request for Persisten Volume storage"),(0,i.kt)("li",{parentName:"ul"},"Includes how much storage, type of storage, and access mode"),(0,i.kt)("li",{parentName:"ul"},"Access mode can be read-write once, read-only many, read-write many"),(0,i.kt)("li",{parentName:"ul"},"PVC stays pending if no PV can satisfy it and dynamic provisioning is not enabled"),(0,i.kt)("li",{parentName:"ul"},"Connect to a Pod through Volume (the Volume in the pod) of type PVC"),(0,i.kt)("li",{parentName:"ul"},"(?) Many pods use the same PVC to connect to PV, but a PV and a PVC are one-to-one mapping")),(0,i.kt)("h2",{id:"source-code"},"Source Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="9.1-namespace.yaml"',title:'"9.1-namespace.yaml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: volumes\n  labels:\n    app: counter\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="9.2-data_tier.yaml"',title:'"9.2-data_tier.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: data-tier\n  labels:\n    app: microservices\nspec:\n  ports:\n  - port: 6379\n    protocol: TCP # default\n    name: redis # optional when only 1 port\n  selector:\n    tier: data\n  type: ClusterIP # default\n---\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: data-tier-volume\nspec:\n  capacity:\n    storage: 1Gi # 1 gibibyte\n  accessModes:\n    - ReadWriteOnce\n  awsElasticBlockStore:\n    volumeID: INSERT_VOLUME_ID # replace with actual ID\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: data-tier-volume-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 128Mi # 128 mebibytes\n---\napiVersion: apps/v1 # apps API group\nkind: Deployment\nmetadata:\n  name: data-tier\n  labels:\n    app: microservices\n    tier: data\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: data\n  template:\n    metadata:\n      labels:\n        app: microservices\n        tier: data\n    spec: # Pod spec\n      containers:\n      - name: redis\n        image: redis:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n          - containerPort: 6379\n            name: redis\n        livenessProbe:\n          tcpSocket:\n            port: redis # named port\n          initialDelaySeconds: 15\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n        volumeMounts:\n          - mountPath: /data\n            name: data-tier-volume\n      # The PVC will find PV that satisfies the conditions in the PVC file\n      # Then the access mode of PVC will become the only option of access mode of that PV\n      # The PV will be bound to the PVC\n      volumes:\n        # This name is the PV name in the cluster\n      - name: data-tier-volume\n        # If you don't want to use persisten volume\n        # Replace it with emptyDir of other ephemeral storage\n        persistentVolumeClaim:\n          claimName: data-tier-volume-claim\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The app-tier and support-tier is the same as the previous files")),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Connect into containers in the pod (may need to specify ",(0,i.kt)("inlineCode",{parentName:"li"},"-c")," if have multiple containers)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n deployments exec -it <pod_name> -- /bin/bash\n")),(0,i.kt)("h2",{id:"references"},"References"))}d.isMDXComponent=!0}}]);