(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[7983],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),p=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,b=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(b,s(s({ref:n},c),{},{components:t})):r.createElement(b,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4791:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=t(4034),a=t(9973),i=(t(7294),t(3905)),s=["components"],l={},o="Probes",p={unversionedId:"Cloud/Kubernetes/Basics/Probes",id:"Cloud/Kubernetes/Basics/Probes",isDocsHomePage:!1,title:"Probes",description:"- Kubernetes assumes that the pod is ready when it is set up, but it's not always true.",source:"@site/docs/Cloud/Kubernetes/Basics/Probes.md",sourceDirName:"Cloud/Kubernetes/Basics",slug:"/Cloud/Kubernetes/Basics/Probes",permalink:"/docs/Cloud/Kubernetes/Basics/Probes",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pods",permalink:"/docs/Cloud/Kubernetes/Basics/Pods"},next:{title:"Rollouts",permalink:"/docs/Cloud/Kubernetes/Basics/Rollouts"}},c=[{value:"Types",id:"types",children:[],level:2},{value:"Declaration",id:"declaration",children:[],level:2},{value:"Architecture",id:"architecture",children:[],level:2},{value:"Source Code",id:"source-code",children:[],level:2},{value:"Commands",id:"commands",children:[],level:2},{value:"References",id:"references",children:[],level:2}],u={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"probes"},"Probes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Kubernetes assumes that the pod is ready when it is set up, but it's not always true."),(0,i.kt)("li",{parentName:"ul"},"The pod may need some time for initialization, and in this period it becomes non-responsive."),(0,i.kt)("li",{parentName:"ul"},"Kubernetes provides probes (health-check) to handle this situation.")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Readiness Probes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Used to check when a pod is ready to server the request (like loading configuration)"),(0,i.kt)("li",{parentName:"ul"},"Useful after startup to check external dependency"),(0,i.kt)("li",{parentName:"ul"},"Service only send traffic to ready pods"))),(0,i.kt)("li",{parentName:"ul"},"Liveness Probes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Detect when a pod enters a broken state"),(0,i.kt)("li",{parentName:"ul"},"Restart the pod"),(0,i.kt)("li",{parentName:"ul"},"Declare in the same way as readiness probes")))),(0,i.kt)("h2",{id:"declaration"},"Declaration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Probes can be declared in Pods' containers"),(0,i.kt)("li",{parentName:"ul"},"All container probes must pass for a pod to pass"),(0,i.kt)("li",{parentName:"ul"},"Probe actions can be a command runs in the container, and HTTP request, or opening a TCP socket, ...")),(0,i.kt)("h2",{id:"architecture"},"Architecture"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Data Tier (redis)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Liveness: Open TCP Socket"),(0,i.kt)("li",{parentName:"ul"},"Readiness: ",(0,i.kt)("inlineCode",{parentName:"li"},"redis-cli ping")," commands"))),(0,i.kt)("li",{parentName:"ul"},"App Tier (Server)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Liveness: HTTP GET /probe/liveness"),(0,i.kt)("li",{parentName:"ul"},"Readiness: HTTP GET /probe/readiness")))),(0,i.kt)("h2",{id:"source-code"},"Source Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="7.1-namespace.yaml"',title:'"7.1-namespace.yaml"'},"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: probes\n  labels:\n    app: counter\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="7.2-data_tier.yaml"',title:'"7.2-data_tier.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: data-tier\n  labels:\n    app: microservices\nspec:\n  ports:\n  - port: 6379\n    protocol: TCP # default \n    name: redis # optional when only 1 port\n  selector:\n    tier: data \n  type: ClusterIP # default\n---\napiVersion: apps/v1 # apps API group\nkind: Deployment\nmetadata:\n  name: data-tier\n  labels:\n    app: microservices\n    tier: data\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: data\n  template:\n    metadata:\n      labels:\n        app: microservices\n        tier: data\n    spec: # Pod spec\n      containers:\n      - name: redis\n        image: redis:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n          - containerPort: 6379\n            name: redis\n        livenessProbe:\n          tcpSocket:\n            port: redis # named port\n          initialDelaySeconds: 15\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="7.3-app_tier.yaml"',title:'"7.3-app_tier.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: app-tier\n  labels:\n    app: microservices\nspec:\n  ports:\n  - port: 8080\n  selector:\n    tier: app\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-tier\n  labels:\n    app: microservices\n    tier: app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: app\n  template:\n    metadata:\n      labels:\n        app: microservices\n        tier: app\n    spec:\n      containers:\n      - name: server\n        image: lrakai/microservices:server-v1\n        ports:\n          - containerPort: 8080\n            name: server\n        env:\n          - name: REDIS_URL\n            # Environment variable service discovery\n            # Naming pattern:\n            #   IP address: <all_caps_service_name>_SERVICE_HOST\n            #   Port: <all_caps_service_name>_SERVICE_PORT\n            #   Named Port: <all_caps_service_name>_SERVICE_PORT_<all_caps_port_name>\n            value: redis://$(DATA_TIER_SERVICE_HOST):$(DATA_TIER_SERVICE_PORT_REDIS)\n            # In multi-container example value was\n            # value: redis://localhost:6379 \n          - name: DEBUG\n            value: express:*\n        livenessProbe:\n          httpGet:\n            path: /probe/liveness\n            port: server\n          initialDelaySeconds: 5\n        readinessProbe:\n          httpGet:\n            path: /probe/readiness\n            port: server\n          initialDelaySeconds: 3\n")),(0,i.kt)("h2",{id:"commands"},"Commands"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Monitor")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n probes get deployments -w\n\n# Or you can use the previous watch approach\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Get logs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n probes logs <pod_name> | cut -d ' ' -f 5,8-11\n\n# Get logs of a pod and then pipe to cut command\n# cut -d: use ' ' as delimiter\n# cut -f: after -d, select the position to display\n")),(0,i.kt)("h2",{id:"references"},"References"))}d.isMDXComponent=!0}}]);