(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9175],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return y}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(t),y=o,f=m["".concat(l,".").concat(y)]||m[y]||p[y]||a;return t?r.createElement(f,c(c({ref:n},s),{},{components:t})):r.createElement(f,c({ref:n},s))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6875:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return s},default:function(){return m}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),c=["components"],i={},l="Go Factory Pattern",u={unversionedId:"Programming/Design Pattern/Patterns/Factory/Go",id:"Programming/Design Pattern/Patterns/Factory/Go",isDocsHomePage:!1,title:"Go Factory Pattern",description:"Factory",source:"@site/docs/Programming/Design Pattern/Patterns/Factory/Go.md",sourceDirName:"Programming/Design Pattern/Patterns/Factory",slug:"/Programming/Design Pattern/Patterns/Factory/Go",permalink:"/docs/Programming/Design Pattern/Patterns/Factory/Go",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Builder Pattern Overview",permalink:"/docs/Programming/Design Pattern/Patterns/Builder/Overview"},next:{title:"Factory Pattern",permalink:"/docs/Programming/Design Pattern/Patterns/Factory/Overview"}},s=[{value:"Factory",id:"factory",children:[]},{value:"Factory Generator",id:"factory-generator",children:[{value:"Functional",id:"functional",children:[]},{value:"Structure",id:"structure",children:[]}]},{value:"Prototype Factory",id:"prototype-factory",children:[]},{value:"References",id:"references",children:[]}],p={toc:s};function m(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"go-factory-pattern"},"Go Factory Pattern"),(0,a.kt)("h2",{id:"factory"},"Factory"),(0,a.kt)("p",null,"This code snippet demostrate the use of factory function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang"},'type Person struct {\n  Name string\n  Age int\n}\n\nfunc NewPerson(name string, age int) *Person {\n  return &Person{name, age}\n}\n\nfunc main_() {\n  // initialize directly\n  p := Person{"John", 22}\n  fmt.Println(p)\n\n  // use a constructor\n  p2 := NewPerson("Jane", 21)\n  p2.Age = 30\n  fmt.Println(p2)\n}\n')),(0,a.kt)("h2",{id:"factory-generator"},"Factory Generator"),(0,a.kt)("h3",{id:"functional"},"Functional"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This code snippet use closure to create a factory generator"),(0,a.kt)("li",{parentName:"ul"},"It's more succint and elegant")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang"},'type Employee struct {\n  Name, Position string\n  AnnualIncome int\n}\n\n// functional approach\nfunc NewEmployeeFactory(position string,\n  annualIncome int) func(name string) *Employee {\n  return func(name string) *Employee {\n    return &Employee{name, position, annualIncome}\n  }\n}\n\nfunc main() {\n  developerFactory := NewEmployeeFactory("Developer", 60000)\n  managerFactory := NewEmployeeFactory("Manager", 80000)\n\n  developer := developerFactory("Adam")\n  manager := managerFactory("Jane")\n\n  fmt.Println(developer)\n  fmt.Println(manager)\n}\n')),(0,a.kt)("h3",{id:"structure"},"Structure"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The code snippet use a new type to implement a factory generator"),(0,a.kt)("li",{parentName:"ul"},"However, it usually need an additional interface when passed into another function"),(0,a.kt)("li",{parentName:"ul"},"Because you still need to specify the concrete type, its use case is limited")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang"},'type Employee struct {\n  Name, Position string\n  AnnualIncome int\n}\n\n// structural approach\ntype EmployeeFactory struct {\n  Position string\n  AnnualIncome int\n}\n\ninterface EmployeeCreator {\n    Create(string) *Employee\n}\n\nfunc NewEmployeeFactory(position string,\n  annualIncome int) *EmployeeFactory {\n  return &EmployeeFactory{position, annualIncome}\n}\n\nfunc (f *EmployeeFactory) Create(name string) *Employee {\n  return &Employee{name, f.Position, f.AnnualIncome}\n}\n\nfunc main() {\n  bossFactory := NewEmployeeFactory2("CEO", 100000)\n  // can modify post-hoc\n  bossFactory.AnnualIncome = 110000\n  boss := bossFactory.Create("Sam")\n  fmt.Println(boss)\n}\n')),(0,a.kt)("h2",{id:"prototype-factory"},"Prototype Factory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This code snippet create an object by condition.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang"},'type Employee struct {\n  Name, Position string\n  AnnualIncome int\n}\n\nconst (\n  Developer = iota\n  Manager\n)\n\n// functional\nfunc NewEmployee(role int) *Employee {\n  switch role {\n  case Developer:\n    return &Employee{"", "Developer", 60000}\n  case Manager:\n    return &Employee{"", "Manager", 80000}\n  default:\n    panic("unsupported role")\n  }\n}\n\nfunc main() {\n  m := NewEmployee(Manager)\n  m.Name = "Sam"\n  fmt.Println(m)\n}\n')),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.udemy.com/course/design-patterns-go"},"https://www.udemy.com/course/design-patterns-go"))))}m.isMDXComponent=!0}}]);