(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4936],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return h}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),h=i,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||a;return t?r.createElement(m,l(l({ref:n},p),{},{components:t})):r.createElement(m,l({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},255:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),l=["components"],o={},s="DIP (Dependency Inversion Principle)",c={unversionedId:"Programming/Design Pattern/Principle/DIP",id:"Programming/Design Pattern/Principle/DIP",isDocsHomePage:!1,title:"DIP (Dependency Inversion Principle)",description:"- High-level modules should not depend on low-level modules. Both should depend on abstractions.",source:"@site/docs/Programming/Design Pattern/Principle/DIP.md",sourceDirName:"Programming/Design Pattern/Principle",slug:"/Programming/Design Pattern/Principle/DIP",permalink:"/docs/Programming/Design Pattern/Principle/DIP",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/Programming/Design Pattern/Patterns/Singleton/Overview"},next:{title:"ISP (Interface Segregation Principle)",permalink:"/docs/Programming/Design Pattern/Principle/ISP"}},p=[{value:"Example",id:"example",children:[]},{value:"References",id:"references",children:[]}],d={toc:p};function u(e){var n=e.components,t=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dip-dependency-inversion-principle"},"DIP (Dependency Inversion Principle)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"High-level modules should not depend on low-level modules. Both should depend on abstractions."),(0,a.kt)("li",{parentName:"ul"},"Abstractions should not depend on details. Details should depend on abstractions."),(0,a.kt)("li",{parentName:"ul"},"It is different from the Dependency Injection."),(0,a.kt)("li",{parentName:"ul"},"Why we call it an inversion because in a traditional way, a higher level module depends on the lower level module. However, we invert this to let both depend on an abstraction layer.")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"enum Relationship\n{\n  PARENT,\n  CHILD,\n  SIBLING\n}\n\nclass Person\n{\n  public String name;\n  // dob etc.\n\n\n  public Person(String name) {\n    this.name = name;\n  }\n}\n")),(0,a.kt)("p",null,"By defining a interface ",(0,a.kt)("inlineCode",{parentName:"p"},"RelationshipBrowser"),", the higher class ",(0,a.kt)("inlineCode",{parentName:"p"},"Research")," only has to call the defined method and the implementation is hidden in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Relationships")," class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'interface RelationshipBrowser\n{\n  List<Person> findAllChildrenOf(String name);\n}\n\nclass Relationships implements RelationshipBrowser\n{\n  public List<Person> findAllChildrenOf(String name) {\n\n    return relations.stream()\n      .filter(x -> Objects.equals(x.getValue0().name, name)\n              && x.getValue1() == Relationship.PARENT)\n      .map(Triplet::getValue2)\n      .collect(Collectors.toList());\n  }\n\n  // Triplet class requires javatuples\n  private List<Triplet<Person, Relationship, Person>> relations =\n    new ArrayList<>();\n\n  public List<Triplet<Person, Relationship, Person>> getRelations() {\n    return relations;\n  }\n\n  public void addParentAndChild(Person parent, Person child)\n  {\n    relations.add(new Triplet<>(parent, Relationship.PARENT, child));\n    relations.add(new Triplet<>(child, Relationship.CHILD, parent));\n  }\n}\n\nclass Research\n{\n  public Research(Relationships relationships)\n  {\n    // high-level: find all of john\'s children\n    List<Triplet<Person, Relationship, Person>> relations = relationships.getRelations();\n    relations.stream()\n      .filter(x -> x.getValue0().name.equals("John")\n              && x.getValue1() == Relationship.PARENT)\n      .forEach(ch -> System.out.println("John has a child called " + ch.getValue2().name));\n  }\n\n  public Research(RelationshipBrowser browser)\n  {\n    List<Person> children = browser.findAllChildrenOf("John");\n    for (Person child : children)\n      System.out.println("John has a child called " + child.name);\n  }\n}\n\nclass DIPDemo\n{\n  public static void main(String[] args)\n  {\n    Person parent = new Person("John");\n    Person child1 = new Person("Chris");\n    Person child2 = new Person("Matt");\n\n    // low-level module\n    Relationships relationships = new Relationships();\n    relationships.addParentAndChild(parent, child1);\n    relationships.addParentAndChild(parent, child2);\n\n    new Research(relationships);\n  }\n}\n')),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.udemy.com/course/design-patterns-java/"},"https://www.udemy.com/course/design-patterns-java/"))))}u.isMDXComponent=!0}}]);