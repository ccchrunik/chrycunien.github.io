(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[638],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4328:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],l={},s="Services",c={unversionedId:"Cloud/Kubernetes/Basics/Services",id:"Cloud/Kubernetes/Basics/Services",isDocsHomePage:!1,title:"Services",description:"A service defines networking rules for accessing from Pods in the cluster and from the Internet.",source:"@site/docs/Cloud/Kubernetes/Basics/Services.md",sourceDirName:"Cloud/Kubernetes/Basics",slug:"/Cloud/Kubernetes/Basics/Services",permalink:"/docs/Cloud/Kubernetes/Basics/Services",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Services Discovery",permalink:"/docs/Cloud/Kubernetes/Basics/Services-Discovery"},next:{title:"Volumes",permalink:"/docs/Cloud/Kubernetes/Basics/Volumes"}},u=[{value:"Connectivity",id:"connectivity",children:[]},{value:"Example",id:"example",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"services"},"Services"),(0,i.kt)("p",null,"A service defines networking rules for accessing from Pods in the cluster and from the Internet."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use labels to select a group of Pods"),(0,i.kt)("li",{parentName:"ul"},"Service has a fixed IP address"),(0,i.kt)("li",{parentName:"ul"},"Distribute requests across Pods in the group (load-balancing)"),(0,i.kt)("li",{parentName:"ul"},"It is a concept of process group. The client send requests to the service, and then the service redirect requests to the Pods.")),(0,i.kt)("h2",{id:"connectivity"},"Connectivity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pods' networks are internal network, you cannot access the container directly."),(0,i.kt)("li",{parentName:"ul"},"Moreover, if a ",(0,i.kt)("inlineCode",{parentName:"li"},"Pod")," fail, it will get a ip address from a pool. Therefore, we cannot guarantee the ip address is the same."),(0,i.kt)("li",{parentName:"ul"},"You use ",(0,i.kt)("inlineCode",{parentName:"li"},"Service")," to serve as a gateway to connect to pods.")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"This example follow the example of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Pods")," section."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="2.1-web_service.yaml"',title:'"2.1-web_service.yaml"'},"apiVersion: v1\nkind: Service\nmetadata:\n  name: webserver\n  labels:\n    app: webserver\nspec:\n  ports:\n  - port: 80 # The Pods' container port\n  selector:\n    app: webserver\n  type: NodePort # Allocate port over this service on each node\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NodePort"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Create a mapping between ",(0,i.kt)("inlineCode",{parentName:"li"},"Pod")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Node")),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"kubectl get services")," to find the service information"),(0,i.kt)("li",{parentName:"ul"},"Like ",(0,i.kt)("inlineCode",{parentName:"li"},"<pod>:<node>/<protocol>")," => ",(0,i.kt)("inlineCode",{parentName:"li"},"80:31635/TCP")),(0,i.kt)("li",{parentName:"ul"},"The range is between ",(0,i.kt)("inlineCode",{parentName:"li"},"32000 ~ 32767")),(0,i.kt)("li",{parentName:"ul"},"Each node will have the same port open for this service, and the traffic will be redirected to the service"),(0,i.kt)("li",{parentName:"ul"},"This mapping allows each node to access the pod using this service"))),(0,i.kt)("li",{parentName:"ul"},"Endpoints: all pods that are selected with the same label")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl describe service webserver\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The output of the above command")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# Output:\nName:                     webserver\nNamespace:                default\nLabels:                   app=webserver\nAnnotations:              <none>\nSelector:                 app=webserver\nType:                     NodePort\nIP:                       10.100.79.120\nPort:                     <unset>  80/TCP\nTargetPort:               80/TCP\nNodePort:                 <unset>  31635/TCP\nEndpoints:                172.17.0.3:80\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   <none>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Get node ip")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# -A specify print out another line after the result\nkubectl describe nodes | grep -i address -A 1\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Verify you can access the pod")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# curl <ip>:<port>\ncurl 172.16.85.5:31635\n")))}d.isMDXComponent=!0}}]);