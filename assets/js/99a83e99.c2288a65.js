(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[371],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(t),f=o,h=d["".concat(c,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(h,s(s({ref:n},l),{},{components:t})):r.createElement(h,s({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7405:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var r=t(4034),o=t(9973),a=(t(7294),t(3905)),s=["components"],i={},c="Create User",u={unversionedId:"Linux/Script/Project/Create-User",id:"Linux/Script/Project/Create-User",isDocsHomePage:!1,title:"Create User",description:"These scripts will automatically create default user.",source:"@site/docs/Linux/Script/Project/Create-User.md",sourceDirName:"Linux/Script/Project",slug:"/Linux/Script/Project/Create-User",permalink:"/docs/Linux/Script/Project/Create-User",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sleep",permalink:"/docs/Linux/Script/Commands/Sleep"},next:{title:"Generate Random Password",permalink:"/docs/Linux/Script/Project/Random"}},l=[{value:"Version 1",id:"version-1",children:[],level:2},{value:"Version 2",id:"version-2",children:[],level:2},{value:"Version 3",id:"version-3",children:[],level:2}],p={toc:l};function d(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-user"},"Create User"),(0,a.kt)("p",null,"These scripts will automatically create default user."),(0,a.kt)("h2",{id:"version-1"},"Version 1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Read user input using prompt."),(0,a.kt)("li",{parentName:"ul"},"Require user to input name, comment, and password."),(0,a.kt)("li",{parentName:"ul"},"Force user to change password when first login."),(0,a.kt)("li",{parentName:"ul"},"Display the account information at last.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Make sure this script is executed by root\nif [[ "${UID}" -ne 0 ]]\nthen\n  echo \'You are not root\'\n  exit 1\nfi\n\n# Enter username\nread -p "Enter your username: " USER_NAME\n\n# Enter name for the account\nread -p "Enter the real name for this user or application: " COMMENT\n\n# Enter password\nread -p "Enter your password: " PASSWORD\n\n# Create a new user\nuseradd -c "${COMMENT}" -m "${USER_NAME}"\n\n# Set default password\necho ${PASSWORD} | passwd --stdin ${USER_NAME}\n\n# Check if the creation of user success or not\nif [[ "${?}" -ne 0 ]]\nthen\n  echo \'The account could not be created!\'\n  exit 1\nfi\n\n# Force password change on first login.\npasswd -e ${USER_NAME}\n\necho "Your username is: ${USER_NAME}"\necho "Your default password is: ${PASSWORD}"\necho "Your host is: ${HOSTNAME}"\n')),(0,a.kt)("h2",{id:"version-2"},"Version 2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use command-line argument for user input instead of prompt."),(0,a.kt)("li",{parentName:"ul"},"Add usage info."),(0,a.kt)("li",{parentName:"ul"},"Auto-generate password by default.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Make sure this script is executed by root\nif [[ "${UID}" -ne 0 ]]\nthen\n  echo \'Please run with sudo or root\'\n  exit 1\nfi\n\nif [[ "${#}" -ne 3 ]]\nthen\n  echo "Usage: ${0} USER_NAME [COMMENT]..."\n  echo "Create an account on local user system by providing username and comments field"\n  exit 1\nfi\n\nUSER_NAME="${1}"\n\n# Shift out the USER_NAME\nshift\nCOMMENT="${*}"\n\nSPECIAL_CHARACTER=$(echo \'!@#$%^&*()_-+=\' | fold -w1 | shuf | head -c1)\nPASSWORD="$(date +%s%N${RANDOM}${RANDOM} | sha256sum | head -c48)${SPECIAL_CHARACTER}"\n\n# Create a new user\nuseradd -c "${COMMENT}" -m "${USER_NAME}"\n\n# Set default password\necho ${PASSWORD} | passwd --stdin ${USER_NAME}\n\n# Check if the creation of user success or not\nif [[ "${?}" -ne 0 ]]\nthen\n  echo \'The account could not be created!\'\n  exit 1\nfi\n\n# Force password change on first login.\npasswd -e ${USER_NAME}\n\necho "Your username is: ${USER_NAME}"\necho "Your default password is: ${PASSWORD}"\necho "Your host is: ${HOSTNAME}"\n')),(0,a.kt)("h2",{id:"version-3"},"Version 3"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Output error messages to ",(0,a.kt)("inlineCode",{parentName:"li"},"STDERR")),(0,a.kt)("li",{parentName:"ul"},"Suppress outputs of other commands (",(0,a.kt)("inlineCode",{parentName:"li"},"&> /dev/null"),")")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Make sure this script is executed by root\nif [[ "${UID}" -ne 0 ]]\nthen\n  echo \'Please run with sudo or root\' >&2\n  exit 1\nfi\n\nif [[ "${#}" -ne 3 ]]\nthen\n  echo "Usage: ${0} USER_NAME [COMMENT]..." >&2\n  echo "Create an account on local user system by providing username and comments field" >&2\n  exit 1\nfi\n\nUSER_NAME="${1}"\n\n# Shift out the USER_NAME\nshift\nCOMMENT="${*}"\n\nSPECIAL_CHARACTER=$(echo \'!@#$%^&*()_-+=\' | fold -w1 | shuf | head -c1)\nPASSWORD="$(date +%s%N${RANDOM}${RANDOM} | sha256sum | head -c48)${SPECIAL_CHARACTER}"\n\n# Create a new user\nuseradd -c "${COMMENT}" -m "${USER_NAME}" &> /dev/null\n\n# Set default password\necho ${PASSWORD} | passwd --stdin ${USER_NAME} &> /dev/null\n\n# Check if the creation of user success or not\nif [[ "${?}" -ne 0 ]]\nthen\n  echo \'The account could not be created!\' >&2\n  exit 1\nfi\n\n# Force password change on first login.\npasswd -e ${USER_NAME} &> /dev/null\n\necho "Your username is: ${USER_NAME}"\necho "Your default password is: ${PASSWORD}"\necho "Your host is: ${HOSTNAME}"\nexit 0\n')))}d.isMDXComponent=!0}}]);