(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[167],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=s(t),p=i,d=f["".concat(l,".").concat(p)]||f[p]||m[p]||o;return t?r.createElement(d,c(c({ref:n},u),{},{components:t})):r.createElement(d,c({ref:n},u))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,c=new Array(o);c[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,c[1]=a;for(var s=2;s<o;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2629:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var r=t(2122),i=t(9756),o=(t(7294),t(3905)),c=["components"],a={},l="Vim Setup",s={unversionedId:"Tools/Vim/Setup",id:"Tools/Vim/Setup",isDocsHomePage:!1,title:"Vim Setup",description:"Settings",source:"@site/docs/Tools/Vim/Setup.md",sourceDirName:"Tools/Vim",slug:"/Tools/Vim/Setup",permalink:"/docs/Tools/Vim/Setup",editUrl:"https://github.com/woodcutter-eric/woodcutter-eric.github.io/docs/Tools/Vim/Setup.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Blog TODO",permalink:"/docs/TODO/blog"}},u=[{value:"Settings",id:"settings",children:[]},{value:"Reference",id:"reference",children:[]}],m={toc:u};function f(e){var n=e.components,t=(0,i.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vim-setup"},"Vim Setup"),(0,o.kt)("h2",{id:"settings"},"Settings"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go to ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/sickill/vim-monokai"},"this website")," and download the font ",(0,o.kt)("inlineCode",{parentName:"li"},"monokai"),"."),(0,o.kt)("li",{parentName:"ol"},"Put the following configuration in ",(0,o.kt)("inlineCode",{parentName:"li"},"~/.vimrc"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'"################### Magic vimrc ###################\n" ctrl+n Enable/disable mouse\n" ctrl+b Switch to text/binary\n" ctrl+j To utf-8 file\n" ctrl+t Convert tab to spaces\n" ctrl+l Toggle line breaking\n" ctrl+f Switch to full/simple\n \n"#######################################################\nset nocompatible\n \n"#######################################################\nsyntax enable\nset number\nset noruler\nset ignorecase\nset smartcase\nset incsearch\nset cindent\nset expandtab\nset tabstop=4\nset softtabstop=4\nset shiftwidth=4\nset smarttab\nset confirm\nset backspace=indent,eol,start\nset history=500\nset showcmd\nset showmode\nset nowrap\nset autowrite\nset mouse=a\n \n"#######################################################\n" Color\nset t_Co=256\n" colo torte\nset cursorline\n" set cursorcolumn\nset hlsearch\n" hi CursorLine cterm=none ctermbg=DarkMagenta ctermfg=White\n" hi CursorColumn cterm=none ctermbg=DarkMagenta ctermfg=White\n" hi Search cterm=reverse ctermbg=none ctermfg=none\n"set background=dark\nset guifont=Fira\\ Code:h12\nset lines=50 columns=135\nset scrolloff=10\nset list listchars=tab:\\:\\ ,trail:\xb7,extends:?,precedes:?,nbsp:\xd7 \n" hi LineNr cterm=bold ctermfg=DarkGrey ctermbg=NONE\n" hi CursorLineNr cterm=bold ctermfg=Green ctermbg=NONE\ncolorscheme monokai\n\n"#######################################################\n" statusline\nset laststatus=2\nset statusline=%#filepath#[%{expand(\'%:p\')}]%#filetype#[%{strlen(&fenc)?&fenc:&enc},\\ %{&ff},\\ %{strlen(&filetype)?&filetype:\'plain\'}]%#filesize#%{FileSize()}%{IsBinary()}%=%#position#%c,%l/%L\\ [%3p%%]\nhi filepath cterm=none ctermbg=238 ctermfg=40\nhi filetype cterm=none ctermbg=238 ctermfg=45\nhi filesize cterm=none ctermbg=238 ctermfg=225\nhi position cterm=none ctermbg=238 ctermfg=228\nfunction IsBinary()\n    if (&binary == 0)\n        return ""\n    else\n        return "[Binary]"\n    endif\nendfunction\nfunction FileSize()\n    let bytes = getfsize(expand("%:p"))\n    if bytes <= 0\n        return "[Empty]"\n    endif\n    if bytes < 1024\n        return "[" . bytes . "B]"\n    elseif bytes < 1048576\n        return "[" . (bytes / 1024) . "KB]"\n    else\n        return "[" . (bytes / 1048576) . "MB]"\n    endif\nendfunction\n \n"#######################################################\n" encode\nif has("multi_byte")\n    set fileencodings=utf-8,utf-16,big5,gb2312,gbk,gb18030,euc-jp,euc-kr,latin1\nelse\n    echoerr "If +multi_byte is not included, you should compile Vim with big features."\nendif\n \n"#######################################################\n" shortcut\n" Toggle mouse\nmap <C-n> :call SwitchMouseMode()<CR>\nmap! <C-n> <Esc>:call SwitchMouseMode()<CR>\nfunction SwitchMouseMode()\n    if (&mouse == "a")\n        let &mouse = ""\n        echo "Mouse is disabled."\n    else\n        let &mouse = "a"\n        echo "Mouse is enabled."\n    endif\nendfunction\n" Toggle text/binary\nmap <C-b> :call SwitchTextBinaryMode()<CR>\nmap! <C-b> <Esc>:call SwitchTextBinaryMode()<CR>\nfunction SwitchTextBinaryMode()\n    if (&binary == 0)\n        set binary\n        set noeol\n        echo "Switch to binary mode."\n    else\n        set nobinary\n        set eol\n        echo "Switch to text mode."\n    endif\nendfunction\n" To utf-8 file\nmap <C-j> :call ToUTF8()<CR>\nmap! <C-j> <Esc>:call ToUTF8()<CR>\nfunction ToUTF8()\n    if (&fileencoding == "utf-8")\n        echo "It is already UTF-8."\n    else\n        let &fileencoding="utf-8"\n        echo "Convert to UTF-8."\n    endif\n    let &ff="unix"\nendfunction\n" Convert tab to spaces\nmap <C-t> :call TabToSpaces()<CR>\nmap! <C-t> <Esc>:call TabToSpaces()<CR>\nfunction TabToSpaces()\n    retab\n    echo "Convert tab to spaces."\nendfunction\n" Toggle line breaking\nmap <C-l> :call SwitchLineBreakingMode()<CR>\nmap! <C-l> <Esc>:call SwitchLineBreakingMode()<CR>\nfunction SwitchLineBreakingMode()\n    if (&wrap == 0)\n        set wrap\n        echo "Switch to line breaking mode."\n    else\n        set nowrap\n        echo "Switch to one line mode."\n    endif\nendfunction\n" Switch to full/simple\nmap <C-f> :call SwitchFullSimpleMode()<CR>\nmap! <C-f> <Esc>:call SwitchFullSimpleMode()<CR>\nfunction SwitchFullSimpleMode()\n    if (&mouse == "a")\n        let &mouse = ""\n        set nocindent\n        set nonumber\n        set wrap\n        echo "Switch to simple mode.(nomouse, nonumber, nocindent, wrap)"\n    else\n        let &mouse = "a"\n        set cindent\n        set number\n        set nowrap\n        echo "Switch to full mode.(mouse, number, cindent, nowrap)"\n    endif\nendfunction\n')),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://magiclen.org/vimrc/"},"https://magiclen.org/vimrc/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://wiki.csie.ncku.edu.tw/vim/vimrc"},"http://wiki.csie.ncku.edu.tw/vim/vimrc")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/sickill/vim-monokai"},"https://github.com/sickill/vim-monokai"))))}f.isMDXComponent=!0}}]);