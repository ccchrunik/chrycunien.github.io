(self.webpackChunkyingchiaochen_website=self.webpackChunkyingchiaochen_website||[]).push([[6503],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),f=o,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return t?r.createElement(d,a(a({ref:n},u),{},{components:t})):r.createElement(d,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8787:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=t(4034),o=t(9973),i=(t(7294),t(3905)),a=["components"],l={},s="Basic Structure",c={unversionedId:"Commons/Server/Go/Basics",id:"Commons/Server/Go/Basics",isDocsHomePage:!1,title:"Basic Structure",description:"A simple mux handler",source:"@site/docs/Commons/Server/Go/Basics.md",sourceDirName:"Commons/Server/Go",slug:"/Commons/Server/Go/Basics",permalink:"/docs/Commons/Server/Go/Basics",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Misc",permalink:"/docs/Commons/Logging/Go/Misc"},next:{title:"Resources",permalink:"/docs/Commons/Server/Go/Resources"}},u=[{value:"A simple mux handler",id:"a-simple-mux-handler",children:[{value:"Build and Run",id:"build-and-run",children:[],level:3}],level:2},{value:"A Self-Defined Server",id:"a-self-defined-server",children:[],level:2},{value:"References",id:"references",children:[],level:2}],p={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-structure"},"Basic Structure"),(0,i.kt)("h2",{id:"a-simple-mux-handler"},"A simple mux handler"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can use a single mux to handle you application logic."),(0,i.kt)("li",{parentName:"ul"},"The problem is the mux is served by the default http handler (no timeout and loggers, ...). Usually, we will create a new server on our own to customize the settings.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="main.go"',title:'"main.go"'},'package main\n\nimport (\n    "log"\n    "net/http"\n)\n\nfunc home(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte("Hello from Snippetbox"))\n}\n\nfunc showSnippet(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte("Display a specific snippet..."))\n}\n\nfunc createSnippet(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte("Create a new snippet..."))\n}\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc("/", home)\n    mux.HandleFunc("/snippet", showSnippet)\n    mux.HandleFunc("/snippet/create", createSnippet)\n\n    log.Println("Starting server on :4000")\n    err := http.ListenAndServe(":4000", mux)\n    log.Fatal(err)\n}\n')),(0,i.kt)("h3",{id:"build-and-run"},"Build and Run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ go run main.go\n# go run .\n")),(0,i.kt)("h2",{id:"a-self-defined-server"},"A Self-Defined Server"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"By using ",(0,i.kt)("inlineCode",{parentName:"li"},"http.Server"),", you customize timeout.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="main.go"',title:'"main.go"'},'package main\n\nimport (\n    "flag"\n    "fmt"\n    "log"\n    "net/http"\n    "os"\n    "time"\n)\n\nconst version = "1.0.0"\n\ntype config struct {\n    port int\n    env  string\n}\n\ntype application struct {\n    config config\n    logger *log.Logger\n}\n\nfunc main() {\n    var cfg config\n\n    flag.IntVar(&cfg.port, "port", 4000, "API server port")\n    flag.StringVar(&cfg.env, "env", "development", "Environment (development|staging|production)")\n    flag.Parse()\n\n    logger := log.New(os.Stdout, "", log.Ldate|log.Ltime)\n\n    app := &application{\n        config: cfg,\n        logger: logger,\n    }\n\n    srv := &http.Server{\n        Addr:         fmt.Sprintf(":%d", cfg.port),\n        Handler:      app.routes(),\n        IdleTimeout:  time.Minute,\n        ReadTimeout:  10 * time.Second,\n        WriteTimeout: 30 * time.Second,\n    }\n\n    logger.Printf("starting %s server on %s", cfg.env, srv.Addr)\n    err := srv.ListenAndServe()\n    logger.Fatal(err)\n}\n\nfunc (app *application) healthcheckHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, "status: available")\n    fmt.Fprintf(w, "environment: %s\\n", app.config.env)\n    fmt.Fprintf(w, "version: %s\\n", version)\n}\n')),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Alex Edwards - ",(0,i.kt)("a",{parentName:"li",href:"https://lets-go.alexedwards.net/"},"Let's Go"))))}m.isMDXComponent=!0}}]);